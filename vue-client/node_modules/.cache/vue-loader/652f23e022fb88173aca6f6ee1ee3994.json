{"remainingRequest":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/spineor/Downloads/aelis4-web/vue-client/src/views/warehouse/orderEntry/components/unitsDetail/UnitsDetailDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/spineor/Downloads/aelis4-web/vue-client/src/views/warehouse/orderEntry/components/unitsDetail/UnitsDetailDialog.vue","mtime":1566984596000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from 'vuex';\nimport constants from '@/utils/constants';\nimport PrintUnitLabel from './PrintUnitLabel';\n\nexport default {\n  components: { PrintUnitLabel },\n  computed: {\n    ...mapGetters([\n      'orderEntry',\n      'extensions'\n    ])\n  },\n  props: {\n    unitsConsolidateId: {\n      type: Number,\n      default: null\n    },\n    consigneeAccountId: {\n      type: Number,\n      default: null\n    }\n  },\n  data() {\n    return {\n      dialogVisible: false,\n      sizes: constants.TABLES.DEFAULT_LIMIT_SIZES,\n      search: ''\n    };\n  },\n  methods: {\n    handleClose(done) {\n      this.$store.dispatch('orderEntry/search', {});\n      done();\n    },\n    handleOpenDialog() {\n      this.dialogVisible = true;\n      this.findUnitsByConsignee(constants.TABLES.DEFAULT_PAGE);\n    },\n    handleSearchChangeLimit(val) {\n      this.$store.dispatch('orderEntry/findUnits', { rows: val, page: constants.TABLES.DEFAULT_PAGE });\n    },\n    handleSearchUnit() {\n      this.findUnitsByConsignee(constants.TABLES.DEFAULT_PAGE);\n    },\n    findUnitsByConsignee(page) {\n      const loading = this.$loading(constants.LOADING.DEFAULT_CONFIG);\n      return this.$store.dispatch('orderEntry/findUnits', {\n        unitsConsolidateId: this.unitsConsolidateId, unitId: this.search, page, returnAllUnitIds: this.getReturnAllUnitIdsExtensions()\n      }).then(({ data }) => {\n        loading.close();\n        // if we are in extensions mode and unitIds comes, then we need to update the unitIds selected for consolidate,\n        // this happens when it checks the consolidate, then when we open this detail dialog the selected unitIds are filled.\n        if (this.orderEntry.isCreatingExtension && data.unitIds) {\n          this.$store.dispatch('extensions/updateUnitsAfterLoadDetail', { consolidateId: this.unitsConsolidateId, consigneeAccountId: this.consigneeAccountId, unitIds: data.unitIds });\n        }\n      }).catch((error) => {\n        this.$message({\n          showClose: true,\n          message: error.response.data.message,\n          type: 'error',\n          duration: constants.duration\n        });\n        loading.close();\n      });\n    },\n    handleDeleteAction(id, close) {\n      const loading = this.$loading(constants.LOADING.DEFAULT_CONFIG);\n      this.$store.dispatch('orderEntry/deleteUnit', id).then((response) => {\n        loading.close();\n        this.$message.success(response.message);\n        this.$store.dispatch('orderEntry/search', {});\n        if (close) {\n          this.dialogVisible = false;\n        } else {\n          this.$store.dispatch('orderEntry/findUnits', { id: this.unitsConsolidateId });\n        }\n      }).catch((error) => {\n        loading.close();\n        this.$message({\n          showClose: true,\n          message: error.response.data.message,\n          type: 'error',\n          duration: constants.MESSAGES.LONG_DURATION\n        });\n      });\n    },\n    handleDelete(id, shipDate) {\n      let message = this.$t('warehouse.orderEntry.unitDeleteConfirmation');\n      message = message.replace('[id]', id).replace('[shipDate]', shipDate);\n\n      if (this.orderEntry.searchUnitResponse.data.length === 1) {\n        return this.$confirm(this.$t('warehouse.orderEntry.lastUnitDeleteConfirmation'), { confirmButtonText: this.$t('common.yes') })\n          .then(() => {\n            this.handleDeleteAction(id, true);\n          })\n          .catch(() => {});\n      }\n      return this.$confirm(message, { confirmButtonText: this.$t('common.yes') })\n        .then(() => {\n          this.handleDeleteAction(id);\n        });\n    },\n    showDeleteButton() {\n      const hasDeletePermission = this.$can(this.permissions.DATA_ENTRY.DELETE_AFTER_CUTOFF_FINALIZED, this.orderEntry.headerUnitList.status)\n           || this.$can(this.permissions.DATA_ENTRY.DELETE_AFTER_CUTOFF_PENDING, this.orderEntry.headerUnitList.status)\n           || this.$can(this.permissions.DATA_ENTRY.DELETE_BEFORE_CUTOFF_FINALIZED, this.orderEntry.headerUnitList.status)\n           || this.$can(this.permissions.DATA_ENTRY.DELETE_BEFORE_CUTOFF_PENDING, this.orderEntry.headerUnitList.status);\n      return hasDeletePermission;\n    },\n    getActualConsolidateExtensions() {\n      if (Object.prototype.hasOwnProperty.call(this.extensions.selectedByConsignee, this.consigneeAccountId)) {\n        const consolidationSelected = this.extensions.selectedByConsignee[this.consigneeAccountId].consolidations.find(c => c.id === this.unitsConsolidateId);\n        return consolidationSelected;\n      }\n      return null;\n    },\n    getReturnAllUnitIdsExtensions() {\n      let returnAllUnitIds = false;\n      if (this.orderEntry.isCreatingExtension) {\n        const consolidationSelectedExists = this.getActualConsolidateExtensions();\n        if (consolidationSelectedExists) {\n          returnAllUnitIds = consolidationSelectedExists.allDetailsCheckedInitially;\n        }\n      }\n      return returnAllUnitIds;\n    },\n    isCheckedExtension(unitId) {\n      const consolidationSelectedExists = this.getActualConsolidateExtensions();\n      if (consolidationSelectedExists) {\n        const unitIdSelected = consolidationSelectedExists.units.find(u => u === unitId);\n        if (unitIdSelected) {\n          return true;\n        }\n        return false;\n      }\n      return false;\n    },\n    handleUpdateSelectedUnitConsolidate(unitId) {\n      const unitConsolidationSelected = {\n        consigneeAccountId: this.orderEntry.headerUnitList.consigneeAccountId,\n        consigneeAccountName: this.orderEntry.headerUnitList.consigneeName,\n        consolidateId: this.unitsConsolidateId,\n        consolidateTotal: this.orderEntry.headerUnitList.numberUnits,\n        unitId\n      };\n      this.$store.dispatch('extensions/updateSelecteUnit', unitConsolidationSelected);\n    }\n  }\n};\n",{"version":3,"sources":["UnitsDetailDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+KA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"UnitsDetailDialog.vue","sourceRoot":"src/views/warehouse/orderEntry/components/unitsDetail","sourcesContent":["<template>\n<span>\n    <i class=\"el-icon-search header-info-dialog-value icon-action\" id=\"btn-units-detail\" @click=\"handleOpenDialog\" size=\"mini\" icon=\"el-icon-plus\"></i>\n    <el-dialog\n    :close-on-click-modal=\"false\"\n    :title=\"orderEntry.isCreatingExtension ? $t('warehouse.orderEntry.extensions.selectDetails') : $t('warehouse.orderEntry.unitsDetailTitle')\"\n    :visible.sync=\"dialogVisible\"\n    width=\"77%\"\n    :before-close=\"handleClose\">\n    <el-col :span=\"4\">\n      <label class=\"margin-bottom-small-list\">{{ $t('warehouse.orderEntry.orderNumber') }}</label>\n    </el-col>\n    <el-col :span=\"4\">\n      <span class=\"span-small-list \"> {{ orderEntry.headerUnitList.orderNumber }} </span>\n    </el-col>\n      <el-col :span=\"4\">\n        <label class=\"margin-bottom-small-list\">{{ $t('warehouse.orderEntry.shipDate') }}</label>\n      </el-col>\n      <el-col :span=\"4\">\n        <span class=\"span-small-list\"> {{ orderEntry.headerUnitList.shipDate | moment(\"MM/DD/YYYY\") }} </span>\n      </el-col>\n      <el-col :span=\"4\">\n        <label class=\"margin-bottom-small-list\">{{ $t('warehouse.orderEntry.consignee') }}</label>\n      </el-col>\n      <el-col :span=\"4\">\n        <span class=\"span-small-list\"> {{ orderEntry.headerUnitList.consigneeName }} </span>\n      </el-col>\n      <el-col :span=\"4\">\n        <label class=\"margin-bottom-small-list\">{{ $t('warehouse.orderEntry.height') }}</label>\n      </el-col>\n      <el-col :span=\"4\">\n        <span class=\"span-small-list\"> {{ orderEntry.headerUnitList.height }} </span>\n      </el-col>\n      <el-col :span=\"4\">\n        <label class=\"margin-bottom-small-list\">{{ $t('warehouse.orderEntry.length') }}</label>\n      </el-col>\n      <el-col :span=\"4\">\n        <span class=\"span-small-list\"> {{ orderEntry.headerUnitList.length }} </span>\n      </el-col>\n      <el-col :span=\"4\">\n        <label class=\"margin-bottom-small-list\">{{ $t('warehouse.orderEntry.width') }}</label>\n      </el-col>\n      <el-col :span=\"4\">\n        <span class=\"span-small-list\"> {{ orderEntry.headerUnitList.width }} </span>\n      </el-col>\n      <el-col :span=\"4\">\n        <label class=\"margin-bottom-small-list\">{{ $t('warehouse.orderEntry.productLong') }}</label>\n      </el-col>\n      <el-col :span=\"4\">\n        <span class=\"span-small-list\"> {{ orderEntry.headerUnitList.productCode }} </span>\n      </el-col>\n      <el-col :span=\"4\">\n        <label class=\"margin-bottom-small-list\">{{ $t('warehouse.orderEntry.productDescription') }}</label>\n      </el-col>\n      <el-col :span=\"4\">\n        <span class=\"span-small-list\"> {{ orderEntry.headerUnitList.productDescription }} </span>\n      </el-col>\n      <el-col :span=\"4\">\n        <label class=\"margin-bottom-small-list\">{{ $t('warehouse.orderEntry.numberOfUnits') }}</label>\n      </el-col>\n      <el-col :span=\"4\">\n        <span class=\"span-small-list\"> {{ orderEntry.headerUnitList.numberUnits }} </span>\n      </el-col>\n      <el-col :span=\"4\">\n        <label class=\"margin-bottom-small-list\">{{ $t('warehouse.orderEntry.unitOfMeasure') }}</label>\n      </el-col>\n      <el-col :span=\"4\">\n        <span class=\"span-small-list\"> {{ orderEntry.headerUnitList.unitOfMeasureName }} </span>\n      </el-col>\n      <el-col :span=\"4\">\n        <label class=\"margin-bottom-small-list\">{{ $t('warehouse.orderEntry.measure') }}</label>\n      </el-col>\n      <el-col :span=\"4\">\n        <span class=\"span-small-list\"> {{ orderEntry.headerUnitList.measure }} </span>\n      </el-col>\n      <el-col :span=\"4\">\n        <label class=\"margin-bottom-small-list\">{{ $t('warehouse.orderEntry.poNumber') }}</label>\n      </el-col>\n      <el-col :span=\"4\">\n        <span class=\"span-small-list\"> {{ orderEntry.headerUnitList.poNumber }} </span>\n      </el-col>\n      <el-col :span=\"4\">\n        <label class=\"margin-bottom-small-list\">{{ $t('warehouse.orderEntry.status') }}</label>\n      </el-col>\n      <el-col :span=\"4\">\n        <span class=\"span-small-list\">{{ $t('warehouse.orderEntry.finalized') }}</span>\n      </el-col>\n      <el-col :span=\"4\">\n        <label class=\"margin-bottom-small-list\">{{ $t('warehouse.orderEntry.farmBroker') }}</label>\n      </el-col>\n      <el-col :span=\"4\">\n        <span class=\"span-small-list\">{{ orderEntry.headerUnitList.farmName }}</span>\n      </el-col>\n      <div>\n        <span class=\"title-list\">{{ $t('warehouse.orderEntry.units') }}</span>\n        <div>\n          <el-col :span=\"3\" class=\"search-unitid-div\">\n            <label class=\"margin-bottom-small-list label-search-unitid\">{{ $t('warehouse.orderEntry.findUnit') }}</label>\n          </el-col>\n          <el-col :span=\"4\">\n            <div>\n              <el-input\n                v-model=\"search\"\n                v-alphanumeric-validation\n                maxlength=\"50\"\n                clearable\n                @change=\"handleSearchUnit\"\n                class=\"inline-input\"\n                size=\"mini\"\n                suffix-icon=\"el-icon-search\"\n                id=\"search-unitid\"\n                ref=\"search-unitid\"\n                ></el-input>\n            </div>\n          </el-col>\n          <el-button id=\"btn-ok-dialog-extensions-top\" class=\"btn-ok-dialog-extensions\" type=\"primary\" size=\"mini\" @click=\"dialogVisible = false\" v-if=\"orderEntry.isCreatingExtension\"> {{ $t('common.ok') }}</el-button>\n        </div>\n      </div>\n        <el-table\n          stripe\n          v-loading=\"orderEntry.loadingSearch\"\n          id=\"units-data-list\"\n          size=\"mini\"\n          tooltip-effect=\"dark\"\n          sortable\n          width=\"80%\"\n          class=\"dark-blue-table\"\n          :empty-text=\"$t('common.notAbleToFindRecords')\"\n          :data=\"orderEntry.searchUnitResponse.data\">\n          <el-table-column\n              prop=\"unitId\"\n              :label=\"$t('common.unit')\"\n              align=\"center\"\n              min-width=\"100\">\n              <template slot-scope=\"scope\">\n                <span class=\"font-size-14px\"> {{ scope.row.unitId }} </span>\n              </template>\n          </el-table-column>\n          <el-table-column\n            align=\"center\" min-width=\"100\"\n            :label=\"$t('common.options')\"\n            v-if=\"!orderEntry.isCreatingExtension\">\n            <template slot-scope=\"scope\">\n              <el-tooltip class=\"item\" effect=\"dark\" :content=\"$t('warehouse.orderEntry.print')\" placement=\"top-start\">\n                <print-unit-label :unitId=\"scope.row.unitId\" :labelPrinted.sync=\"scope.row.labelPrinted\" />\n              </el-tooltip>\n              <el-tooltip class=\"item\" effect=\"dark\" :content=\"$t('warehouse.orderEntry.delete')\" placement=\"top-start\">\n                <i v-if=\"showDeleteButton()\" class=\"el-icon-delete icon-action\" type=\"primary\" size=\"mini\" @click=\"handleDelete(scope.row.unitId, scope.row.shipDate, orderEntry.searchUnitResponse.data)\"></i>\n              </el-tooltip>\n            </template>\n          </el-table-column>\n          <el-table-column\n            align=\"center\" min-width=\"100\"\n            :label=\"$t('warehouse.orderEntry.extensions.requestExtension')\"\n            v-if=\"orderEntry.isCreatingExtension\">\n            <template slot-scope=\"scope\">\n                <el-checkbox :value=\"isCheckedExtension(scope.row.id)\" @change=\"handleUpdateSelectedUnitConsolidate(scope.row.id)\"  label=\"\" class=\"green-indeterminate-checkbox\"></el-checkbox>\n            </template>\n          </el-table-column>\n      </el-table>\n      <el-pagination\n        @size-change=\"handleSearchChangeLimit\"\n        @current-change=\"findUnitsByConsignee\"\n        :current-page.sync=\"orderEntry.actualFiltersUnits.page\"\n        :page-size=\"orderEntry.actualFiltersUnits.rows\"\n        :page-sizes=\"sizes\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :total=\"orderEntry.searchUnitResponse.totalRows\">\n      </el-pagination>\n      <el-button id=\"btn-ok-dialog-extensions-bottom\" class=\"btn-ok-dialog-extensions\" type=\"primary\" size=\"mini\" @click=\"dialogVisible = false\" v-if=\"orderEntry.isCreatingExtension\"> {{ $t('common.ok') }}</el-button>\n    </el-dialog>\n</span>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport constants from '@/utils/constants';\nimport PrintUnitLabel from './PrintUnitLabel';\n\nexport default {\n  components: { PrintUnitLabel },\n  computed: {\n    ...mapGetters([\n      'orderEntry',\n      'extensions'\n    ])\n  },\n  props: {\n    unitsConsolidateId: {\n      type: Number,\n      default: null\n    },\n    consigneeAccountId: {\n      type: Number,\n      default: null\n    }\n  },\n  data() {\n    return {\n      dialogVisible: false,\n      sizes: constants.TABLES.DEFAULT_LIMIT_SIZES,\n      search: ''\n    };\n  },\n  methods: {\n    handleClose(done) {\n      this.$store.dispatch('orderEntry/search', {});\n      done();\n    },\n    handleOpenDialog() {\n      this.dialogVisible = true;\n      this.findUnitsByConsignee(constants.TABLES.DEFAULT_PAGE);\n    },\n    handleSearchChangeLimit(val) {\n      this.$store.dispatch('orderEntry/findUnits', { rows: val, page: constants.TABLES.DEFAULT_PAGE });\n    },\n    handleSearchUnit() {\n      this.findUnitsByConsignee(constants.TABLES.DEFAULT_PAGE);\n    },\n    findUnitsByConsignee(page) {\n      const loading = this.$loading(constants.LOADING.DEFAULT_CONFIG);\n      return this.$store.dispatch('orderEntry/findUnits', {\n        unitsConsolidateId: this.unitsConsolidateId, unitId: this.search, page, returnAllUnitIds: this.getReturnAllUnitIdsExtensions()\n      }).then(({ data }) => {\n        loading.close();\n        // if we are in extensions mode and unitIds comes, then we need to update the unitIds selected for consolidate,\n        // this happens when it checks the consolidate, then when we open this detail dialog the selected unitIds are filled.\n        if (this.orderEntry.isCreatingExtension && data.unitIds) {\n          this.$store.dispatch('extensions/updateUnitsAfterLoadDetail', { consolidateId: this.unitsConsolidateId, consigneeAccountId: this.consigneeAccountId, unitIds: data.unitIds });\n        }\n      }).catch((error) => {\n        this.$message({\n          showClose: true,\n          message: error.response.data.message,\n          type: 'error',\n          duration: constants.duration\n        });\n        loading.close();\n      });\n    },\n    handleDeleteAction(id, close) {\n      const loading = this.$loading(constants.LOADING.DEFAULT_CONFIG);\n      this.$store.dispatch('orderEntry/deleteUnit', id).then((response) => {\n        loading.close();\n        this.$message.success(response.message);\n        this.$store.dispatch('orderEntry/search', {});\n        if (close) {\n          this.dialogVisible = false;\n        } else {\n          this.$store.dispatch('orderEntry/findUnits', { id: this.unitsConsolidateId });\n        }\n      }).catch((error) => {\n        loading.close();\n        this.$message({\n          showClose: true,\n          message: error.response.data.message,\n          type: 'error',\n          duration: constants.MESSAGES.LONG_DURATION\n        });\n      });\n    },\n    handleDelete(id, shipDate) {\n      let message = this.$t('warehouse.orderEntry.unitDeleteConfirmation');\n      message = message.replace('[id]', id).replace('[shipDate]', shipDate);\n\n      if (this.orderEntry.searchUnitResponse.data.length === 1) {\n        return this.$confirm(this.$t('warehouse.orderEntry.lastUnitDeleteConfirmation'), { confirmButtonText: this.$t('common.yes') })\n          .then(() => {\n            this.handleDeleteAction(id, true);\n          })\n          .catch(() => {});\n      }\n      return this.$confirm(message, { confirmButtonText: this.$t('common.yes') })\n        .then(() => {\n          this.handleDeleteAction(id);\n        });\n    },\n    showDeleteButton() {\n      const hasDeletePermission = this.$can(this.permissions.DATA_ENTRY.DELETE_AFTER_CUTOFF_FINALIZED, this.orderEntry.headerUnitList.status)\n           || this.$can(this.permissions.DATA_ENTRY.DELETE_AFTER_CUTOFF_PENDING, this.orderEntry.headerUnitList.status)\n           || this.$can(this.permissions.DATA_ENTRY.DELETE_BEFORE_CUTOFF_FINALIZED, this.orderEntry.headerUnitList.status)\n           || this.$can(this.permissions.DATA_ENTRY.DELETE_BEFORE_CUTOFF_PENDING, this.orderEntry.headerUnitList.status);\n      return hasDeletePermission;\n    },\n    getActualConsolidateExtensions() {\n      if (Object.prototype.hasOwnProperty.call(this.extensions.selectedByConsignee, this.consigneeAccountId)) {\n        const consolidationSelected = this.extensions.selectedByConsignee[this.consigneeAccountId].consolidations.find(c => c.id === this.unitsConsolidateId);\n        return consolidationSelected;\n      }\n      return null;\n    },\n    getReturnAllUnitIdsExtensions() {\n      let returnAllUnitIds = false;\n      if (this.orderEntry.isCreatingExtension) {\n        const consolidationSelectedExists = this.getActualConsolidateExtensions();\n        if (consolidationSelectedExists) {\n          returnAllUnitIds = consolidationSelectedExists.allDetailsCheckedInitially;\n        }\n      }\n      return returnAllUnitIds;\n    },\n    isCheckedExtension(unitId) {\n      const consolidationSelectedExists = this.getActualConsolidateExtensions();\n      if (consolidationSelectedExists) {\n        const unitIdSelected = consolidationSelectedExists.units.find(u => u === unitId);\n        if (unitIdSelected) {\n          return true;\n        }\n        return false;\n      }\n      return false;\n    },\n    handleUpdateSelectedUnitConsolidate(unitId) {\n      const unitConsolidationSelected = {\n        consigneeAccountId: this.orderEntry.headerUnitList.consigneeAccountId,\n        consigneeAccountName: this.orderEntry.headerUnitList.consigneeName,\n        consolidateId: this.unitsConsolidateId,\n        consolidateTotal: this.orderEntry.headerUnitList.numberUnits,\n        unitId\n      };\n      this.$store.dispatch('extensions/updateSelecteUnit', unitConsolidationSelected);\n    }\n  }\n};\n</script>\n<style rel=\"stylesheet/scss\" lang=\"scss\">\n  .search-unitid-div {\n    padding: 0px !important;\n    margin-bottom: 20px !important;\n  }\n\n  .label-search-unitid {\n    text-align: left !important;\n  }\n  .btn-ok-dialog-extensions {\n    float: right;\n  }\n</style>\n"]}]}