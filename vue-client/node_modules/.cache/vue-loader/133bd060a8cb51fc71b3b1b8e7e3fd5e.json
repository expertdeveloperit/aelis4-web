{"remainingRequest":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/spineor/Downloads/aelis4-web/vue-client/src/views/warehouse/orderEntry/TableSummary.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/spineor/Downloads/aelis4-web/vue-client/src/views/warehouse/orderEntry/TableSummary.vue","mtime":1564385803006},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Message } from 'element-ui';\nimport moment from 'moment';\nimport { mapGetters } from 'vuex';\nimport constants from '@/utils/constants';\nimport apiConstants from '@/utils/apiConstants';\nimport Autocomplete from '@/components/Autocomplete';\nimport UnitsDetailDialog from './components/unitsDetail/UnitsDetailDialog';\nimport PrintUnitConsolidateLabel from './components/tableSummary/PrintUnitConsolidateLabel';\n\nexport default {\n  name: 'TableSummary',\n  components: { Autocomplete, UnitsDetailDialog, PrintUnitConsolidateLabel },\n  computed: {\n    ...mapGetters(['orderEntry'])\n  },\n  filters: {\n    statusFilterType(id) {\n      return constants.ORDER_ENTRY.ORDER_STATUS.find(\n        status => status.value === id\n      ).typeCss;\n    }\n  },\n  data() {\n    return {\n      editForm: {\n        id: null,\n        shipDate: null,\n        consigneeAccountId: null,\n        unitOfMeasureName: null,\n        measure: null,\n        numberUnits: null,\n        length: null,\n        width: null,\n        height: null,\n        productCode: '',\n        productDescription: '',\n        poNumber: '',\n        farmName: ''\n      },\n      editFormRules: {\n        consigneeAccountId: [\n          {\n            required: true,\n            message: this.$t('warehouse.orderEntry.error.consigneeRequired'),\n            trigger: 'submit'\n          }\n        ],\n        length: [\n          {\n            required: true,\n            message: this.$t('warehouse.orderEntry.error.lengthRequired'),\n            trigger: 'blur'\n          }\n        ],\n        width: [\n          {\n            required: true,\n            message: this.$t('warehouse.orderEntry.error.widthRequired'),\n            trigger: 'blur'\n          }\n        ],\n        height: [\n          {\n            required: true,\n            message: this.$t('warehouse.orderEntry.error.heightRequired'),\n            trigger: 'blur'\n          }\n        ]\n      },\n      finalizedId: constants.ORDER_ENTRY.ORDER_STATUS[2].value,\n      unitOfMeasureOptions: constants.ORDER_ENTRY.UNIT_OF_MEASURE_LIST,\n      measureOptions: constants.ORDER_ENTRY.MEASURE_LIST,\n      urlConsignee: apiConstants.END_POINTS.ACCOUNTS.CONSIGNEE_BY_SHIPPER,\n      urlProduct: apiConstants.END_POINTS.PRODUCT_SEARCH,\n      sizes: constants.TABLES.DEFAULT_LIMIT_SIZES\n    };\n  },\n  methods: {\n    handleSearchChangePage(val) {\n      this.$store.dispatch('orderEntry/search', { page: val });\n    },\n    handleSearchChangeLimit(val) {\n      this.$store.dispatch('orderEntry/search', {\n        rows: val,\n        page: constants.TABLES.DEFAULT_PAGE\n      });\n    },\n    handleSortChange(data) {\n      let { prop } = data;\n      const { order } = data;\n      prop = constants.TABLES.ORDER_ENTRY.COLUMNS_MAP_SORT[prop] || prop;\n      this.$store.dispatch('orderEntry/search', {\n        orderField: prop,\n        orderDirection: constants.TABLES.ORDER_DIRECTION[order]\n      });\n    },\n    handleEdit(row) {\n      this.$store.dispatch('orderEntry/setEditingRow', true);\n      row.edit = true;\n      this.editForm.id = row.id;\n      this.editForm.shipDate = row.shipDate;\n      this.editForm.consigneeAccountId = row.consigneeAccountId;\n      this.editForm.shipperAccountId = row.shipperAccountId;\n      this.editForm.unitOfMeasureName = row.unitOfMeasureName;\n      this.editForm.measure = row.measure;\n      this.editForm.numberUnits = row.numberUnits;\n      this.editForm.length = row.length;\n      this.editForm.width = row.width;\n      this.editForm.height = row.height;\n      this.editForm.productCode = row.productCode;\n      this.editForm.productDescription = row.productDescription;\n      this.editForm.poNumber = row.poNumber;\n      this.editForm.farmName = row.farmName;\n      this.editForm.status = row.status;\n      this.$nextTick(() => {\n        this.$refs['row-consignee'].setLocalModel(\n          `${row.consigneeName} - ${row.consigneeAccount}`\n        );\n        this.$refs['row-productCode'].setLocalModel(row.productCode);\n        if (this.$refs['row-consignee'].$el) {\n          this.$refs['row-consignee'].$el\n            .getElementsByTagName('input')[0]\n            .focus();\n        }\n      });\n    },\n    async handleUpdate() {\n      const minValue = this.orderEntry.settings.minCubesPerBox;\n      let {\n        length, height, width\n      } = this.editForm;\n      const { measure } = this.editForm;\n\n      if (measure === constants.ORDER_ENTRY.MEASURE_LIST[1].value) {\n        length *= constants.ORDER_ENTRY.CONST_VALUE;\n        width *= constants.ORDER_ENTRY.CONST_VALUE;\n        height *= constants.ORDER_ENTRY.CONST_VALUE;\n      }\n      const volume = length * width * height;\n      if (volume <= minValue) {\n        let message = this.$t('warehouse.orderEntry.error.minValueValidationError');\n        message = message.replace('[unit]', this.editForm.numberUnits).replace('[minValue]', minValue);\n        const confirm = await this.$confirm(message, { confirmButtonText: this.$t('OK') });\n        if (confirm) { return this.getSubmitForm(); }\n        return false;\n      } if (volume > constants.ORDER_ENTRY.MAX_VALUE) {\n        let message = this.$t('warehouse.orderEntry.error.maxValueValidationError');\n        message = message.replace('[minValue]', minValue).replace('[max_value]', constants.ORDER_ENTRY.MAX_VALUE);\n        this.$message.warning(message);\n        return false;\n      }\n      return this.getSubmitForm();\n    },\n    clearEdit() {\n      this.$store.dispatch('orderEntry/setEditingRow', false);\n      this.$refs.editForm.resetFields();\n      this.$refs['row-consignee'].clearLocalModel();\n      this.$refs['row-productCode'].clearLocalModel();\n    },\n    cancelEdit(row) {\n      row.edit = false;\n      this.clearEdit();\n    },\n    handleDelete(id, numberUnits, shipDate) {\n      let message = this.$t('warehouse.orderEntry.deleteConfirmation');\n      message = message.replace('[numberUnits]', numberUnits);\n      message = message.replace(\n        '[shipDate]',\n        moment(shipDate, constants.DATES.DEFAULT_BACKEND_FORMAT).format(\n          constants.DATES.DEFAULT_DISPLAY_FORMAT\n        )\n      );\n      return this.$confirm(message, {\n        confirmButtonText: this.$t('common.yes')\n      })\n        .then(() => {\n          Message.closeAll();\n          const loading = this.$loadingthis.orderEntry(constants.LOADING.DEFAULT_CONFIG);\n          this.$storethis.orderEntry\n            .dispatch('orderEntry/deletthis.orderEntrye', id)\n            .then((response) => {\n              loading.close();\n              this.$message.success(response.message);\n              this.$store.dispatch('orderEntry/search', {});\n            })\n            .catch(() => {\n              loading.close();\n            });\n        })\n        .catch(() => {});\n    },\n    showEditButton(orderStatus) {\n      const hasEditPermission = this.$can(\n        this.permissions.DATA_ENTRY.EDIT_AFTER_CUTOFF_FINALIZED, orderStatus\n      )\n        || this.$can(\n          this.permissions.DATA_ENTRY.EDIT_AFTER_CUTOFF_PENDING, orderStatus\n        )\n        || this.$can(\n          this.permissions.DATA_ENTRY.EDIT_BEFORE_CUTOFF_FINALIZED, orderStatus\n        )\n        || this.$can(\n          this.permissions.DATA_ENTRY.EDIT_BEFORE_CUTOFF_PENDING, orderStatus\n        );\n      return !this.orderEntry.isEditingRow && hasEditPermission;\n    },\n    showDeleteButton(orderStatus) {\n      const hasDeletePermission = this.$can(\n        this.permissions.DATA_ENTRY.DELETE_AFTER_CUTOFF_FINALIZED, orderStatus\n      )\n        || this.$can(\n          this.permissions.DATA_ENTRY.DELETE_AFTER_CUTOFF_PENDING, orderStatus\n        )\n        || this.$can(\n          this.permissions.DATA_ENTRY.DELETE_BEFORE_CUTOFF_FINALIZED, orderStatus\n        )\n        || this.$can(\n          this.permissions.DATA_ENTRY.DELETE_BEFORE_CUTOFF_PENDING, orderStatus\n        );\n      return hasDeletePermission;\n    },\n    getSubmitForm() {\n      this.$refs.editForm.validate((valid, validationsErrors) => {\n        if (valid) {\n          Message.closeAll();\n          const loading = this.$loading(constants.LOADING.DEFAULT_CONFIG);\n          this.$store\n            .dispatch('orderEntry/update', {\n              unitsConsolidateId: this.editForm.id,\n              orderToUpdate: this.editForm\n            })\n            .then((response) => {\n              loading.close();\n              this.$message.success(response.message);\n              this.clearEdit();\n              this.$store.dispatch('orderEntry/search', {});\n            })\n            .catch(() => {\n              loading.close();\n            });\n        } else {\n          let errorMessage = '';\n          Object.keys(validationsErrors).forEach((key) => {\n            validationsErrors[key].forEach((validation) => {\n              errorMessage += `${validation.message}. `;\n            });\n          });\n          this.$message.warning(errorMessage);\n        }\n      });\n    }\n  }\n};\n",{"version":3,"sources":["TableSummary.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"TableSummary.vue","sourceRoot":"src/views/warehouse/orderEntry","sourcesContent":["<template>\n  <div class=\"height-100-p\">\n    <el-form :model=\"editForm\" :rules=\"editFormRules\" ref=\"editForm\">\n      <el-table\n        :data=\"orderEntry.list\"\n        v-loading=\"orderEntry.loadingSearch\"\n        id=\"order-data-list\"\n        size=\"mini\"\n        tooltip-effect=\"dark\"\n        sortable\n        class=\"dark-blue-table\"\n        :empty-text=\"$t('common.notAbleToFindRecords')\"\n        @sort-change=\"handleSortChange\"\n        stripe\n      >\n        <el-table-column\n          prop=\"orderNumber\"\n          sortable=\"custom\"\n          :min-width=\"15\"\n          align=\"center\"\n          :label=\"$t('warehouse.orderEntry.orderNumberShort')\"\n        >\n          <template slot-scope=\"scope\">\n            <el-tooltip class=\"item\" effect=\"dark\" :content=\"scope.row.orderNumber\" placement=\"top\">\n              <span>{{ scope.row.orderNumber }}</span>\n            </el-tooltip>\n          </template>\n        </el-table-column>\n        <el-table-column\n          prop=\"consignee\"\n          sortable=\"custom\"\n          :min-width=\"30\"\n          :label=\"$t('warehouse.orderEntry.consignee')\"\n        >\n          <template slot-scope=\"scope\">\n            <template v-if=\"scope.row.edit\">\n              <el-form-item prop=\"consigneeAccountId\">\n                <autocomplete\n                  :model.sync=\"editForm.consigneeAccountId\"\n                  :shipperAccountId=\"orderEntry.settings.shipperAccountId\"\n                  labelFieldLastWithDash=\"number\"\n                  popperAppendToBody\n                  :url=\"urlConsignee\"\n                  labelField=\"name\"\n                  valueField=\"id\"\n                  id=\"row-consignee\"\n                  ref=\"row-consignee\"\n                />\n              </el-form-item>\n            </template>\n            <template v-else>\n              <el-tooltip\n                class=\"item\"\n                effect=\"dark\"\n                :content=\"`${scope.row.consigneeName} - ${ scope.row.consigneeAccount }`\"\n                placement=\"top\"\n              >\n                <span>{{ scope.row.consigneeName }} - {{ scope.row.consigneeAccount }}</span>\n              </el-tooltip>\n            </template>\n          </template>\n        </el-table-column>\n        <el-table-column\n          :min-width=\"10\"\n          prop=\"unitOfMeasure\"\n          :label=\"$t('warehouse.orderEntry.unitOfMeasureShort')\"\n        >\n          <template slot-scope=\"scope\">\n            <template v-if=\"scope.row.edit\">\n              <el-form-item prop=\"unitOfMeasureName\">\n                <el-select\n                  v-model=\"editForm.unitOfMeasureName\"\n                  id=\"row-unitOfMeasureName\"\n                  ref=\"row-unitOfMeasureName\"\n                  size=\"mini\"\n                >\n                  <el-option\n                    v-for=\"item in unitOfMeasureOptions\"\n                    :key=\"item.value\"\n                    :label=\"item.label\"\n                    :value=\"item.value\"\n                  ></el-option>\n                </el-select>\n              </el-form-item>\n            </template>\n            <span v-else>{{scope.row.unitOfMeasureName}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column\n          :min-width=\"8\"\n          prop=\"numberUnits\"\n          :label=\"$t('warehouse.orderEntry.numberOfUnitsShort')\"\n        >\n          <template slot-scope=\"scope\">\n            <template v-if=\"scope.row.edit && scope.row.status !== finalizedId\">\n              <el-form-item prop=\"numberUnits\">\n                <el-input-number\n                  v-model=\"editForm.numberUnits\"\n                  v-numeric-validation\n                  :precision=\"0\"\n                  :min=\"1\"\n                  :max=\"999\"\n                  :maxlength=\"3\"\n                  :controls=\"false\"\n                  size=\"mini\"\n                  class=\"inline-input width-100p\"\n                  id=\"row-number-units\"\n                ></el-input-number>\n              </el-form-item>\n            </template>\n            <span v-else>{{scope.row.numberUnits}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column :min-width=\"10\" prop=\"measure\" :label=\"$t('warehouse.orderEntry.measure')\">\n          <template slot-scope=\"scope\">\n            <template v-if=\"scope.row.edit\">\n              <el-form-item prop=\"measure\">\n                <el-select\n                  v-model=\"editForm.measure\"\n                  id=\"row-measure\"\n                  ref=\"row-measure\"\n                  size=\"mini\"\n                >\n                  <el-option\n                    v-for=\"item in measureOptions\"\n                    :key=\"item.value\"\n                    :label=\"item.label\"\n                    :value=\"item.value\"\n                  ></el-option>\n                </el-select>\n              </el-form-item>\n            </template>\n            <span v-else>{{scope.row.measure}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"length\" :min-width=\"8\" :label=\"$t('warehouse.orderEntry.length')\">\n          <template slot-scope=\"scope\">\n            <template v-if=\"scope.row.edit\">\n              <el-form-item prop=\"length\">\n                <el-input-number\n                  v-model=\"editForm.length\"\n                  v-numeric-validation\n                  :controls=\"false\"\n                  :precision=\"3\"\n                  :min=\"0\"\n                  :max=\"999.999\"\n                  size=\"mini\"\n                  class=\"inline-input width-100p\"\n                  id=\"row-length\"\n                  ref=\"row-length\"\n                ></el-input-number>\n              </el-form-item>\n            </template>\n            <span v-else>{{scope.row.length}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"width\" :min-width=\"8\" :label=\"$t('warehouse.orderEntry.width')\">\n          <template slot-scope=\"scope\">\n            <template v-if=\"scope.row.edit\">\n              <el-form-item prop=\"width\">\n                <el-input-number\n                  v-model=\"editForm.width\"\n                  v-numeric-validation\n                  :controls=\"false\"\n                  :precision=\"3\"\n                  :min=\"0\"\n                  :max=\"999.999\"\n                  size=\"mini\"\n                  class=\"inline-input width-100p\"\n                  id=\"row-width\"\n                  ref=\"row-width\"\n                ></el-input-number>\n              </el-form-item>\n            </template>\n            <span v-else>{{scope.row.width}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"height\" :min-width=\"8\" :label=\"$t('warehouse.orderEntry.height')\">\n          <template slot-scope=\"scope\">\n            <template v-if=\"scope.row.edit\">\n              <el-form-item prop=\"height\">\n                <el-input-number\n                  v-model=\"editForm.height\"\n                  v-numeric-validation\n                  :controls=\"false\"\n                  :precision=\"3\"\n                  :min=\"0\"\n                  :max=\"999.999\"\n                  size=\"mini\"\n                  class=\"inline-input width-100p\"\n                  id=\"row-height\"\n                  ref=\"row-height\"\n                ></el-input-number>\n              </el-form-item>\n            </template>\n            <span v-else>{{scope.row.height}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column\n          :min-width=\"10\"\n          prop=\"productCode\"\n          :label=\"$t('warehouse.orderEntry.product')\"\n        >\n          <template slot-scope=\"scope\">\n            <template v-if=\"scope.row.edit\">\n              <el-form-item prop=\"productCode\">\n                <autocomplete\n                  :model.sync=\"editForm.productCode\"\n                  :modelAdditional.sync=\"editForm.productDescription\"\n                  popperAppendToBody\n                  :strict=\"false\"\n                  :url=\"urlProduct\"\n                  labelField=\"description\"\n                  labelfieldSelected=\"code\"\n                  valueField=\"code\"\n                  valueFieldAdditional=\"description\"\n                  :maxlength=\"5\"\n                  id=\"row-productCode\"\n                  ref=\"row-productCode\"\n                />\n              </el-form-item>\n            </template>\n            <span v-else>{{scope.row.productCode}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column\n          prop=\"productDescription\"\n          sortable=\"custom\"\n          :min-width=\"20\"\n          :label=\"$t('warehouse.orderEntry.productDescription')\"\n        >\n          <template slot-scope=\"scope\">\n            <template v-if=\"scope.row.edit\">\n              <el-form-item prop=\"productDescription\">\n                <el-input\n                  v-model=\"editForm.productDescription\"\n                  v-alphanumeric-validation\n                  clearable\n                  maxlength=\"30\"\n                  size=\"mini\"\n                  class=\"inline-input\"\n                  id=\"row-product-description\"\n                  ref=\"row-product-description\"\n                ></el-input>\n              </el-form-item>\n            </template>\n            <template v-else>\n              <el-tooltip\n                class=\"item\"\n                effect=\"dark\"\n                :content=\"scope.row.productDescription\"\n                placement=\"top\"\n              >\n                <span>{{ scope.row.productDescription }}</span>\n              </el-tooltip>\n            </template>\n          </template>\n        </el-table-column>\n        <el-table-column\n          :min-width=\"8\"\n          prop=\"poNumber\"\n          :label=\"$t('warehouse.orderEntry.poNumber')\"\n        >\n          <template slot-scope=\"scope\">\n            <template v-if=\"scope.row.edit\">\n              <el-form-item prop=\"poNumber\">\n                <el-input\n                  v-model=\"editForm.poNumber\"\n                  v-alphanumeric-validation\n                  clearable\n                  maxlength=\"25\"\n                  size=\"mini\"\n                  class=\"inline-input\"\n                  id=\"row-po-number\"\n                  ref=\"row-po-number\"\n                ></el-input>\n              </el-form-item>\n            </template>\n            <template v-else>\n              <el-tooltip class=\"item\" effect=\"dark\" :content=\"scope.row.poNumber\" placement=\"top\">\n                <span>{{ scope.row.poNumber }}</span>\n              </el-tooltip>\n            </template>\n          </template>\n        </el-table-column>\n        <el-table-column\n          :min-width=\"15\"\n          prop=\"farmName\"\n          :label=\"$t('warehouse.orderEntry.farmBroker')\"\n        >\n          <template slot-scope=\"scope\">\n            <template v-if=\"scope.row.edit\">\n              <el-form-item prop=\"poNumber\">\n                <el-input\n                  v-model=\"editForm.farmName\"\n                  v-alphanumeric-validation\n                  maxlength=\"25\"\n                  size=\"mini\"\n                  class=\"inline-input\"\n                  id=\"row-farm-broker\"\n                  ref=\"row-farm-broker\"\n                ></el-input>\n              </el-form-item>\n            </template>\n            <template v-else>\n              <el-tooltip class=\"item\" effect=\"dark\" :content=\"scope.row.farmName\" placement=\"top\">\n                <span>{{ scope.row.farmName }}</span>\n              </el-tooltip>\n            </template>\n          </template>\n        </el-table-column>\n        <el-table-column\n          align=\"center\"\n          :min-width=\"9\"\n          prop=\"status\"\n          :label=\"$t('warehouse.orderEntry.finalized')\"\n        >\n          <template slot-scope=\"scope\">\n            <span v-if=\"scope.row.status === finalizedId\">\n              <i class=\"el-icon-success green-success\"></i>\n            </span>\n          </template>\n        </el-table-column>\n        <el-table-column\n          :min-width=\"15\"\n          :label=\"$t('common.options')\"\n          align=\"center\"\n          class-name=\"fixed-width\"\n        >\n          <template slot-scope=\"scope\">\n            <el-tooltip\n              v-if=\"showEditButton(scope.row.status)\"\n              class=\"item\"\n              effect=\"dark\"\n              :content=\"$t('warehouse.orderEntry.edit')\"\n              placement=\"top-start\"\n            >\n              <i class=\"el-icon-edit icon-action\" @click=\"handleEdit(scope.row)\"></i>\n            </el-tooltip>\n            <template v-else-if=\"scope.row.edit\">\n              <el-button icon=\"el-icon-success\" circle size=\"mini\" @click=\"handleUpdate()\"></el-button>\n              <el-button\n                icon=\"el-icon-circle-close\"\n                circle\n                size=\"mini\"\n                @click=\"cancelEdit(scope.row)\"\n              ></el-button>\n            </template>\n            <template v-if=\"!scope.row.edit\">\n              <el-tooltip\n                v-if=\"scope.row.status === finalizedId\"\n                class=\"item\"\n                effect=\"dark\"\n                :content=\"$t('warehouse.orderEntry.details')\"\n                placement=\"top-start\"\n              >\n                <units-detail-dialog :unitsConsolidateId=\"scope.row.id\" />\n              </el-tooltip>\n              <el-tooltip\n                v-if=\"scope.row.status === finalizedId\"\n                :unitsConsolidateId=\"scope.row.id\"\n                class=\"item\"\n                effect=\"dark\"\n                :content=\"$t('warehouse.orderEntry.print')\"\n                placement=\"top-start\"\n              >\n                <print-unit-consolidate-label\n                  :unitsConsolidateId=\"scope.row.id\"\n                  :labelPrinted.sync=\"scope.row.labelPrinted\"\n                />\n              </el-tooltip>\n              <el-tooltip\n                v-if=\"showDeleteButton(scope.row.status)\"\n                class=\"item\"\n                effect=\"dark\"\n                :content=\"$t('warehouse.orderEntry.delete')\"\n                placement=\"top-start\"\n              >\n                <i\n                  class=\"el-icon-delete icon-action\"\n                  type=\"primary\"\n                  size=\"mini\"\n                  @click=\"handleDelete(scope.row.id, scope.row.numberUnits, scope.row.shipDate)\"\n                ></i>\n              </el-tooltip>\n            </template>\n          </template>\n        </el-table-column>\n      </el-table>\n    </el-form>\n    <el-pagination\n      v-show=\"orderEntry.total > 0\"\n      @size-change=\"handleSearchChangeLimit\"\n      :page-sizes=\"sizes\"\n      :page-size=\"orderEntry.actualFilters.rows\"\n      :current-page.sync=\"orderEntry.actualFilters.page\"\n      @current-change=\"handleSearchChangePage\"\n      layout=\"total, sizes, prev, pager, next, jumper\"\n      :total=\"orderEntry.total\"\n    ></el-pagination>\n  </div>\n</template>\n\n<script>\nimport { Message } from 'element-ui';\nimport moment from 'moment';\nimport { mapGetters } from 'vuex';\nimport constants from '@/utils/constants';\nimport apiConstants from '@/utils/apiConstants';\nimport Autocomplete from '@/components/Autocomplete';\nimport UnitsDetailDialog from './components/unitsDetail/UnitsDetailDialog';\nimport PrintUnitConsolidateLabel from './components/tableSummary/PrintUnitConsolidateLabel';\n\nexport default {\n  name: 'TableSummary',\n  components: { Autocomplete, UnitsDetailDialog, PrintUnitConsolidateLabel },\n  computed: {\n    ...mapGetters(['orderEntry'])\n  },\n  filters: {\n    statusFilterType(id) {\n      return constants.ORDER_ENTRY.ORDER_STATUS.find(\n        status => status.value === id\n      ).typeCss;\n    }\n  },\n  data() {\n    return {\n      editForm: {\n        id: null,\n        shipDate: null,\n        consigneeAccountId: null,\n        unitOfMeasureName: null,\n        measure: null,\n        numberUnits: null,\n        length: null,\n        width: null,\n        height: null,\n        productCode: '',\n        productDescription: '',\n        poNumber: '',\n        farmName: ''\n      },\n      editFormRules: {\n        consigneeAccountId: [\n          {\n            required: true,\n            message: this.$t('warehouse.orderEntry.error.consigneeRequired'),\n            trigger: 'submit'\n          }\n        ],\n        length: [\n          {\n            required: true,\n            message: this.$t('warehouse.orderEntry.error.lengthRequired'),\n            trigger: 'blur'\n          }\n        ],\n        width: [\n          {\n            required: true,\n            message: this.$t('warehouse.orderEntry.error.widthRequired'),\n            trigger: 'blur'\n          }\n        ],\n        height: [\n          {\n            required: true,\n            message: this.$t('warehouse.orderEntry.error.heightRequired'),\n            trigger: 'blur'\n          }\n        ]\n      },\n      finalizedId: constants.ORDER_ENTRY.ORDER_STATUS[2].value,\n      unitOfMeasureOptions: constants.ORDER_ENTRY.UNIT_OF_MEASURE_LIST,\n      measureOptions: constants.ORDER_ENTRY.MEASURE_LIST,\n      urlConsignee: apiConstants.END_POINTS.ACCOUNTS.CONSIGNEE_BY_SHIPPER,\n      urlProduct: apiConstants.END_POINTS.PRODUCT_SEARCH,\n      sizes: constants.TABLES.DEFAULT_LIMIT_SIZES\n    };\n  },\n  methods: {\n    handleSearchChangePage(val) {\n      this.$store.dispatch('orderEntry/search', { page: val });\n    },\n    handleSearchChangeLimit(val) {\n      this.$store.dispatch('orderEntry/search', {\n        rows: val,\n        page: constants.TABLES.DEFAULT_PAGE\n      });\n    },\n    handleSortChange(data) {\n      let { prop } = data;\n      const { order } = data;\n      prop = constants.TABLES.ORDER_ENTRY.COLUMNS_MAP_SORT[prop] || prop;\n      this.$store.dispatch('orderEntry/search', {\n        orderField: prop,\n        orderDirection: constants.TABLES.ORDER_DIRECTION[order]\n      });\n    },\n    handleEdit(row) {\n      this.$store.dispatch('orderEntry/setEditingRow', true);\n      row.edit = true;\n      this.editForm.id = row.id;\n      this.editForm.shipDate = row.shipDate;\n      this.editForm.consigneeAccountId = row.consigneeAccountId;\n      this.editForm.shipperAccountId = row.shipperAccountId;\n      this.editForm.unitOfMeasureName = row.unitOfMeasureName;\n      this.editForm.measure = row.measure;\n      this.editForm.numberUnits = row.numberUnits;\n      this.editForm.length = row.length;\n      this.editForm.width = row.width;\n      this.editForm.height = row.height;\n      this.editForm.productCode = row.productCode;\n      this.editForm.productDescription = row.productDescription;\n      this.editForm.poNumber = row.poNumber;\n      this.editForm.farmName = row.farmName;\n      this.editForm.status = row.status;\n      this.$nextTick(() => {\n        this.$refs['row-consignee'].setLocalModel(\n          `${row.consigneeName} - ${row.consigneeAccount}`\n        );\n        this.$refs['row-productCode'].setLocalModel(row.productCode);\n        if (this.$refs['row-consignee'].$el) {\n          this.$refs['row-consignee'].$el\n            .getElementsByTagName('input')[0]\n            .focus();\n        }\n      });\n    },\n    async handleUpdate() {\n      const minValue = this.orderEntry.settings.minCubesPerBox;\n      let {\n        length, height, width\n      } = this.editForm;\n      const { measure } = this.editForm;\n\n      if (measure === constants.ORDER_ENTRY.MEASURE_LIST[1].value) {\n        length *= constants.ORDER_ENTRY.CONST_VALUE;\n        width *= constants.ORDER_ENTRY.CONST_VALUE;\n        height *= constants.ORDER_ENTRY.CONST_VALUE;\n      }\n      const volume = length * width * height;\n      if (volume <= minValue) {\n        let message = this.$t('warehouse.orderEntry.error.minValueValidationError');\n        message = message.replace('[unit]', this.editForm.numberUnits).replace('[minValue]', minValue);\n        const confirm = await this.$confirm(message, { confirmButtonText: this.$t('OK') });\n        if (confirm) { return this.getSubmitForm(); }\n        return false;\n      } if (volume > constants.ORDER_ENTRY.MAX_VALUE) {\n        let message = this.$t('warehouse.orderEntry.error.maxValueValidationError');\n        message = message.replace('[minValue]', minValue).replace('[max_value]', constants.ORDER_ENTRY.MAX_VALUE);\n        this.$message.warning(message);\n        return false;\n      }\n      return this.getSubmitForm();\n    },\n    clearEdit() {\n      this.$store.dispatch('orderEntry/setEditingRow', false);\n      this.$refs.editForm.resetFields();\n      this.$refs['row-consignee'].clearLocalModel();\n      this.$refs['row-productCode'].clearLocalModel();\n    },\n    cancelEdit(row) {\n      row.edit = false;\n      this.clearEdit();\n    },\n    handleDelete(id, numberUnits, shipDate) {\n      let message = this.$t('warehouse.orderEntry.deleteConfirmation');\n      message = message.replace('[numberUnits]', numberUnits);\n      message = message.replace(\n        '[shipDate]',\n        moment(shipDate, constants.DATES.DEFAULT_BACKEND_FORMAT).format(\n          constants.DATES.DEFAULT_DISPLAY_FORMAT\n        )\n      );\n      return this.$confirm(message, {\n        confirmButtonText: this.$t('common.yes')\n      })\n        .then(() => {\n          Message.closeAll();\n          const loading = this.$loadingthis.orderEntry(constants.LOADING.DEFAULT_CONFIG);\n          this.$storethis.orderEntry\n            .dispatch('orderEntry/deletthis.orderEntrye', id)\n            .then((response) => {\n              loading.close();\n              this.$message.success(response.message);\n              this.$store.dispatch('orderEntry/search', {});\n            })\n            .catch(() => {\n              loading.close();\n            });\n        })\n        .catch(() => {});\n    },\n    showEditButton(orderStatus) {\n      const hasEditPermission = this.$can(\n        this.permissions.DATA_ENTRY.EDIT_AFTER_CUTOFF_FINALIZED, orderStatus\n      )\n        || this.$can(\n          this.permissions.DATA_ENTRY.EDIT_AFTER_CUTOFF_PENDING, orderStatus\n        )\n        || this.$can(\n          this.permissions.DATA_ENTRY.EDIT_BEFORE_CUTOFF_FINALIZED, orderStatus\n        )\n        || this.$can(\n          this.permissions.DATA_ENTRY.EDIT_BEFORE_CUTOFF_PENDING, orderStatus\n        );\n      return !this.orderEntry.isEditingRow && hasEditPermission;\n    },\n    showDeleteButton(orderStatus) {\n      const hasDeletePermission = this.$can(\n        this.permissions.DATA_ENTRY.DELETE_AFTER_CUTOFF_FINALIZED, orderStatus\n      )\n        || this.$can(\n          this.permissions.DATA_ENTRY.DELETE_AFTER_CUTOFF_PENDING, orderStatus\n        )\n        || this.$can(\n          this.permissions.DATA_ENTRY.DELETE_BEFORE_CUTOFF_FINALIZED, orderStatus\n        )\n        || this.$can(\n          this.permissions.DATA_ENTRY.DELETE_BEFORE_CUTOFF_PENDING, orderStatus\n        );\n      return hasDeletePermission;\n    },\n    getSubmitForm() {\n      this.$refs.editForm.validate((valid, validationsErrors) => {\n        if (valid) {\n          Message.closeAll();\n          const loading = this.$loading(constants.LOADING.DEFAULT_CONFIG);\n          this.$store\n            .dispatch('orderEntry/update', {\n              unitsConsolidateId: this.editForm.id,\n              orderToUpdate: this.editForm\n            })\n            .then((response) => {\n              loading.close();\n              this.$message.success(response.message);\n              this.clearEdit();\n              this.$store.dispatch('orderEntry/search', {});\n            })\n            .catch(() => {\n              loading.close();\n            });\n        } else {\n          let errorMessage = '';\n          Object.keys(validationsErrors).forEach((key) => {\n            validationsErrors[key].forEach((validation) => {\n              errorMessage += `${validation.message}. `;\n            });\n          });\n          this.$message.warning(errorMessage);\n        }\n      });\n    }\n  }\n};\n</script>\n\n<style rel=\"stylesheet/scss\" lang=\"scss\">\n</style>\n"]}]}