{"remainingRequest":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/spineor/Downloads/aelis4-web/vue-client/src/components/Autocomplete/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/spineor/Downloads/aelis4-web/vue-client/src/components/Autocomplete/index.vue","mtime":1566984596000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport constants from '@/utils/constants';\nimport autocompleteApiService from '@/api/autocompleteService';\n\nexport default {\n  name: 'Autocomplete',\n  data() {\n    return {\n      localModel: null\n    };\n  },\n  props: {\n    /* The model of parent that must be updated when user select option. */\n    model: {\n      default: null\n    },\n    /* Additional model of parent that must be updated when user select option with other value of item selected. */\n    modelAdditional: {\n      default: null\n    },\n    /* End Point Url to search data. */\n    url: {\n      type: String,\n      default: null\n    },\n    /* Current ShipperAccountId. */\n    shipperAccountId: {\n      type: Number,\n      default: null\n    },\n    maxlength: {\n      type: Number,\n      default: 100\n    },\n    /* If the autocomplete item must be selected to change the parent model. */\n    strict: {\n      type: Boolean,\n      default: true\n    },\n    /* The attribute name of item that must be show in the options of autocomplete. */\n    labelField: {\n      type: String,\n      default: null\n    },\n    /* The attribute name of item that must be show in the options of autocomplete concatenated with dash after labelField. */\n    labelFieldLastWithDash: {\n      type: String,\n      default: null\n    },\n    /* Optional: If the value that we need to show is diferent to labelField. */\n    labelfieldSelected: {\n      type: String,\n      default: null\n    },\n    /* The attribute name of item that must be updated the model. */\n    valueField: {\n      type: String,\n      default: null\n    },\n    /* The attribute name of item that must be updated the modelAdditional. */\n    valueFieldAdditional: {\n      type: String,\n      default: null\n    },\n    styles: {\n      type: String,\n      default: null\n    },\n    classCss: {\n      type: String,\n      default: null\n    },\n    /* The function of parent that must be executed on key enter. */\n    enterKeyAction: {\n      type: Function,\n      default: null\n    },\n    /* The function of parent that must be executed on select. */\n    selectAction: {\n      type: Function,\n      default: null\n    },\n    /* The function of parent that must be executed on clear. */\n    clearAction: {\n      type: Function,\n      default: null\n    },\n    /* Attribute that indicates if the popper must be append to body. */\n    popperAppendToBody: {\n      type: Boolean,\n      default: false\n    },\n    placeholder: {\n      type: String,\n      default: ''\n    }\n  },\n  watch: {\n    localModel() {\n      // If strict is false then it must be update the parent model.\n      if (!this.strict) {\n        this.$emit('update:model', this.localModel);\n      }\n    }\n  },\n  methods: {\n    querySearchAsync(queryString, cb) {\n      if (queryString && queryString.length >= 2 && queryString.trim()) {\n        return autocompleteApiService.getList(this.url, queryString.trim(), this.shipperAccountId).then((response) => {\n          if (response && response.data && response.data.length > 0) {\n            response.data.forEach((element) => {\n              // The value field its necessary by native component to show in the input.\n              element.value = element[this.labelField];\n              element.value += element[this.labelFieldLastWithDash] ? (` - ${element[this.labelFieldLastWithDash]}`) : '';\n            });\n            cb(response.data);\n          } else {\n            cb([]);\n          }\n        });\n      }\n      return false;\n    },\n    handleSelect(item) {\n      this.$emit('update:model', item[this.valueField]);\n      if (this.labelfieldSelected) {\n        this.localModel = item[this.labelfieldSelected];\n      }\n      if (this.valueFieldAdditional) {\n        this.$emit('update:modelAdditional', item[this.valueFieldAdditional]);\n      }\n\n      // Excecute parent select action.\n      if (this.selectAction) {\n        this.selectAction(item);\n      }\n    },\n    clearAll() {\n      this.$emit('update:model', null);\n      // Excecute parent clearAction action.\n      if (this.clearAction) {\n        this.clearAction();\n      }\n    },\n    clearParentModel(event) {\n      // tab, enter, end, home, left, right\n      const isControlKey = constants.KEY_CODE.CONTROL_KEYS_NO_BACKSPACE.find(key => key === event.keyCode);\n\n      if (!isControlKey && this.model && this.strict) {\n        this.$emit('update:model', null);\n      }\n\n      if (constants.KEY_CODE.ENTER === event.keyCode && this.enterKeyAction) {\n        this.enterKeyAction();\n      }\n    },\n    clearLocalModel() {\n      this.localModel = null;\n    },\n    setLocalModel(val) {\n      this.localModel = val;\n    },\n    getLocalModel() {\n      return this.localModel;\n    }\n  }\n};\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"index.vue","sourceRoot":"src/components/Autocomplete","sourcesContent":["<template>\n  <span>\n    <el-autocomplete\n        @clear=\"clearAll\"\n        @keyup.native=\"clearParentModel\"\n        v-alphanumeric-validation\n        v-model=\"localModel\"\n        clearable\n        size=\"mini\"\n        :placeholder=\"placeholder\"\n        :fetch-suggestions=\"querySearchAsync\"\n        :highlight-first-item=\"true\"\n        @select=\"handleSelect\"\n        :trigger-on-focus=\"false\"\n        :style=\"styles\"\n        :class=\"classCss || 'width-100p'\"\n        :maxlength=\"maxlength\"\n        :popper-append-to-body=\"popperAppendToBody\"\n        popper-class=\"autocomplete-popper\"\n        >\n    </el-autocomplete>\n  </span>\n</template>\n\n<script>\nimport constants from '@/utils/constants';\nimport autocompleteApiService from '@/api/autocompleteService';\n\nexport default {\n  name: 'Autocomplete',\n  data() {\n    return {\n      localModel: null\n    };\n  },\n  props: {\n    /* The model of parent that must be updated when user select option. */\n    model: {\n      default: null\n    },\n    /* Additional model of parent that must be updated when user select option with other value of item selected. */\n    modelAdditional: {\n      default: null\n    },\n    /* End Point Url to search data. */\n    url: {\n      type: String,\n      default: null\n    },\n    /* Current ShipperAccountId. */\n    shipperAccountId: {\n      type: Number,\n      default: null\n    },\n    maxlength: {\n      type: Number,\n      default: 100\n    },\n    /* If the autocomplete item must be selected to change the parent model. */\n    strict: {\n      type: Boolean,\n      default: true\n    },\n    /* The attribute name of item that must be show in the options of autocomplete. */\n    labelField: {\n      type: String,\n      default: null\n    },\n    /* The attribute name of item that must be show in the options of autocomplete concatenated with dash after labelField. */\n    labelFieldLastWithDash: {\n      type: String,\n      default: null\n    },\n    /* Optional: If the value that we need to show is diferent to labelField. */\n    labelfieldSelected: {\n      type: String,\n      default: null\n    },\n    /* The attribute name of item that must be updated the model. */\n    valueField: {\n      type: String,\n      default: null\n    },\n    /* The attribute name of item that must be updated the modelAdditional. */\n    valueFieldAdditional: {\n      type: String,\n      default: null\n    },\n    styles: {\n      type: String,\n      default: null\n    },\n    classCss: {\n      type: String,\n      default: null\n    },\n    /* The function of parent that must be executed on key enter. */\n    enterKeyAction: {\n      type: Function,\n      default: null\n    },\n    /* The function of parent that must be executed on select. */\n    selectAction: {\n      type: Function,\n      default: null\n    },\n    /* The function of parent that must be executed on clear. */\n    clearAction: {\n      type: Function,\n      default: null\n    },\n    /* Attribute that indicates if the popper must be append to body. */\n    popperAppendToBody: {\n      type: Boolean,\n      default: false\n    },\n    placeholder: {\n      type: String,\n      default: ''\n    }\n  },\n  watch: {\n    localModel() {\n      // If strict is false then it must be update the parent model.\n      if (!this.strict) {\n        this.$emit('update:model', this.localModel);\n      }\n    }\n  },\n  methods: {\n    querySearchAsync(queryString, cb) {\n      if (queryString && queryString.length >= 2 && queryString.trim()) {\n        return autocompleteApiService.getList(this.url, queryString.trim(), this.shipperAccountId).then((response) => {\n          if (response && response.data && response.data.length > 0) {\n            response.data.forEach((element) => {\n              // The value field its necessary by native component to show in the input.\n              element.value = element[this.labelField];\n              element.value += element[this.labelFieldLastWithDash] ? (` - ${element[this.labelFieldLastWithDash]}`) : '';\n            });\n            cb(response.data);\n          } else {\n            cb([]);\n          }\n        });\n      }\n      return false;\n    },\n    handleSelect(item) {\n      this.$emit('update:model', item[this.valueField]);\n      if (this.labelfieldSelected) {\n        this.localModel = item[this.labelfieldSelected];\n      }\n      if (this.valueFieldAdditional) {\n        this.$emit('update:modelAdditional', item[this.valueFieldAdditional]);\n      }\n\n      // Excecute parent select action.\n      if (this.selectAction) {\n        this.selectAction(item);\n      }\n    },\n    clearAll() {\n      this.$emit('update:model', null);\n      // Excecute parent clearAction action.\n      if (this.clearAction) {\n        this.clearAction();\n      }\n    },\n    clearParentModel(event) {\n      // tab, enter, end, home, left, right\n      const isControlKey = constants.KEY_CODE.CONTROL_KEYS_NO_BACKSPACE.find(key => key === event.keyCode);\n\n      if (!isControlKey && this.model && this.strict) {\n        this.$emit('update:model', null);\n      }\n\n      if (constants.KEY_CODE.ENTER === event.keyCode && this.enterKeyAction) {\n        this.enterKeyAction();\n      }\n    },\n    clearLocalModel() {\n      this.localModel = null;\n    },\n    setLocalModel(val) {\n      this.localModel = val;\n    },\n    getLocalModel() {\n      return this.localModel;\n    }\n  }\n};\n</script>\n<style rel=\"stylesheet/scss\" lang=\"scss\">\n.autocomplete-popper {\n    min-width: 30%;\n}\n</style>\n"]}]}