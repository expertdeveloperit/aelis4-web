{"remainingRequest":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/spineor/Downloads/aelis4-web/vue-client/src/views/warehouse/orderEntry/components/ChangeShipDateButton.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/spineor/Downloads/aelis4-web/vue-client/src/views/warehouse/orderEntry/components/ChangeShipDateButton.vue","mtime":1566984596000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment';\nimport { Message } from 'element-ui';\nimport { mapGetters } from 'vuex';\nimport constants from '@/utils/constants';\n\nexport default {\n  computed: {\n    ...mapGetters([\n      'orderEntry',\n      'hasOrderConsolidations'\n    ])\n  },\n  data() {\n    return {\n      dialogVisible: false,\n      changeShipDateform: {\n        newShipDate: null\n      },\n      formRules: {\n        newShipDate: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.newShipDateRequired'), trigger: 'blur' }\n        ]\n      },\n      shipDatePickerOptions: {}\n    };\n  },\n  methods: {\n    handleClose(done) {\n      done();\n    },\n    handleOpen() {\n      this.changeShipDateform.newShipDate = null;\n      const currentShipDate = moment(this.orderEntry.actualFilters.shipDate, 'YYYY-MM-DD');\n      const shipDateFutureDays = this.orderEntry.settings[constants.SETTINGS.shipDateFutureDays];\n      this.shipDatePickerOptions = {\n        disabledDate(time) {\n          const momentTime = moment(time.getTime());\n          return momentTime.isBefore(moment(), 'day')\n          || momentTime.isAfter(moment().add(shipDateFutureDays || 0, 'days'), 'day')\n          || currentShipDate.isSame(momentTime, 'days');\n        }\n      };\n      this.$nextTick(() => {\n        this.$refs.changeShipDateform.$el[0].focus();\n      });\n    },\n    async confirmCutoffContinue() {\n      await this.$store.dispatch('orderEntry/getCutoffLimitDateNewShipdate', this.changeShipDateform.newShipDate);\n      await this.$store.dispatch('orderEntry/getCutoffLimitDate');\n      let confirmCutoff = true;\n      let confirmCutoffText = '';\n\n      // Current ShipDate:\n      if (this.orderEntry.cutoff.limitDateMillis === 0) {\n        confirmCutoffText = this.$t('warehouse.orderEntry.changeShipDateCurrentDateMovedConfirm').replace('[shipDate]', moment(this.orderEntry.actualFilters.shipDate).format(constants.DATES.DEFAULT_DISPLAY_FORMAT));\n      } else if (this.orderEntry.cutoff.limitDateMillisNewShipDate === 0) {\n        // New ShipDate:\n        confirmCutoffText = this.$t('warehouse.orderEntry.changeShipDatenewDateMovedConfirm').replace('[shipDate]', moment(this.changeShipDateform.newShipDate).format(constants.DATES.DEFAULT_DISPLAY_FORMAT));\n      }\n      // If one of two previous validations indicate that date cutoff closed\n      if (confirmCutoffText) {\n        confirmCutoff = await this.$confirm(confirmCutoffText, { confirmButtonText: this.$t('common.yes') }).catch(() => {});\n      }\n      return !!confirmCutoff;\n    },\n    async handleChangeShipDate() {\n      return new Promise((resolve, reject) => {\n        this.$refs.changeShipDateform.validate(async (valid) => {\n          if (valid) {\n            // Cutoff validations:\n            const confirmCutoffContinue = await this.confirmCutoffContinue();\n            if (!confirmCutoffContinue) { reject(false); }\n            // Close previous messages and show loading\n            Message.closeAll();\n            const loading = this.$loading(constants.LOADING.CHANGE_SHIPDATE_CONFIG);\n            // Call action to changeShipDate\n            try {\n              const response = await this.$store.dispatch('orderEntry/changeShipDate', this.changeShipDateform.newShipDate);\n              this.$message({\n                dangerouslyUseHTMLString: true,\n                type: 'success',\n                message: this.$t('warehouse.orderEntry.changeShipDateShipmentsMoved')\n                  .replace('[totalShipmentsMoved]', response.data.total)\n                  .replace('[shipDate]', moment(this.changeShipDateform.newShipDate, constants.DATES.DEFAULT_BACKEND_FORMAT).format(constants.DATES.DEFAULT_DISPLAY_FORMAT))\n              });\n              this.dialogVisible = false;\n              this.$store.dispatch('orderEntry/search', {});\n              resolve(response);\n            } catch (error) {\n              reject(error);\n            } finally {\n              loading.close();\n            }\n          } else {\n            reject(new Error(this.$t('common.invalid')));\n          }\n        });\n      });\n    },\n    isVisible() {\n      const hasChangeShipDatePermission = this.$can(this.permissions.DATA_ENTRY.CHANGE_SHIP_DATE);\n      return this.hasOrderConsolidations && hasChangeShipDatePermission;\n    }\n  }\n};\n",{"version":3,"sources":["ChangeShipDateButton.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"ChangeShipDateButton.vue","sourceRoot":"src/views/warehouse/orderEntry/components","sourcesContent":["<template>\n<span v-show=\"isVisible()\">\n    <el-link id=\"btn-change-ship-date\" class=\"btn-change-ship-date\" @click=\"dialogVisible = true\" size=\"mini\" :underline=\"false\">{{ $t('warehouse.orderEntry.changeShipDate') }}</el-link>\n    <el-dialog\n      :close-on-click-modal=\"false\"\n      v-on:open=\"handleOpen\"\n      :title=\"$t('warehouse.orderEntry.changeShipDate')\"\n      :visible.sync=\"dialogVisible\"\n      width=\"32%\"\n      id=\"change-ship-date-dialog\"\n      :before-close=\"handleClose\">\n      <el-form :model=\"changeShipDateform\" :rules=\"formRules\" ref=\"changeShipDateform\" label-position=\"right\" size=\"mini\" inline class=\"text-align-end\">\n          <el-row>\n            <el-col class=\"form-vertical-item\">\n            <el-form-item :label=\"$t('warehouse.orderEntry.newShipDate')\" prop=\"newShipDate\">\n                <el-date-picker\n                v-model=\"changeShipDateform.newShipDate\"\n                format=\"MM/dd/yyyy\"\n                :picker-options=\"shipDatePickerOptions\"\n                type=\"date\"\n                id=\"changeShipDateform-new-ship-date\">\n                </el-date-picker>\n            </el-form-item>\n            </el-col>\n          </el-row>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogVisible = false\" size=\"mini\">{{ $t('common.cancel') }}</el-button>\n        <el-button type=\"primary\" @click=\"handleChangeShipDate\" size=\"mini\" class=\"margin-r-18\" id=\"btn-change-ship-date-move\">{{ $t('common.move') }}</el-button>\n      </div>\n    </el-dialog>\n</span>\n</template>\n\n<script>\nimport moment from 'moment';\nimport { Message } from 'element-ui';\nimport { mapGetters } from 'vuex';\nimport constants from '@/utils/constants';\n\nexport default {\n  computed: {\n    ...mapGetters([\n      'orderEntry',\n      'hasOrderConsolidations'\n    ])\n  },\n  data() {\n    return {\n      dialogVisible: false,\n      changeShipDateform: {\n        newShipDate: null\n      },\n      formRules: {\n        newShipDate: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.newShipDateRequired'), trigger: 'blur' }\n        ]\n      },\n      shipDatePickerOptions: {}\n    };\n  },\n  methods: {\n    handleClose(done) {\n      done();\n    },\n    handleOpen() {\n      this.changeShipDateform.newShipDate = null;\n      const currentShipDate = moment(this.orderEntry.actualFilters.shipDate, 'YYYY-MM-DD');\n      const shipDateFutureDays = this.orderEntry.settings[constants.SETTINGS.shipDateFutureDays];\n      this.shipDatePickerOptions = {\n        disabledDate(time) {\n          const momentTime = moment(time.getTime());\n          return momentTime.isBefore(moment(), 'day')\n          || momentTime.isAfter(moment().add(shipDateFutureDays || 0, 'days'), 'day')\n          || currentShipDate.isSame(momentTime, 'days');\n        }\n      };\n      this.$nextTick(() => {\n        this.$refs.changeShipDateform.$el[0].focus();\n      });\n    },\n    async confirmCutoffContinue() {\n      await this.$store.dispatch('orderEntry/getCutoffLimitDateNewShipdate', this.changeShipDateform.newShipDate);\n      await this.$store.dispatch('orderEntry/getCutoffLimitDate');\n      let confirmCutoff = true;\n      let confirmCutoffText = '';\n\n      // Current ShipDate:\n      if (this.orderEntry.cutoff.limitDateMillis === 0) {\n        confirmCutoffText = this.$t('warehouse.orderEntry.changeShipDateCurrentDateMovedConfirm').replace('[shipDate]', moment(this.orderEntry.actualFilters.shipDate).format(constants.DATES.DEFAULT_DISPLAY_FORMAT));\n      } else if (this.orderEntry.cutoff.limitDateMillisNewShipDate === 0) {\n        // New ShipDate:\n        confirmCutoffText = this.$t('warehouse.orderEntry.changeShipDatenewDateMovedConfirm').replace('[shipDate]', moment(this.changeShipDateform.newShipDate).format(constants.DATES.DEFAULT_DISPLAY_FORMAT));\n      }\n      // If one of two previous validations indicate that date cutoff closed\n      if (confirmCutoffText) {\n        confirmCutoff = await this.$confirm(confirmCutoffText, { confirmButtonText: this.$t('common.yes') }).catch(() => {});\n      }\n      return !!confirmCutoff;\n    },\n    async handleChangeShipDate() {\n      return new Promise((resolve, reject) => {\n        this.$refs.changeShipDateform.validate(async (valid) => {\n          if (valid) {\n            // Cutoff validations:\n            const confirmCutoffContinue = await this.confirmCutoffContinue();\n            if (!confirmCutoffContinue) { reject(false); }\n            // Close previous messages and show loading\n            Message.closeAll();\n            const loading = this.$loading(constants.LOADING.CHANGE_SHIPDATE_CONFIG);\n            // Call action to changeShipDate\n            try {\n              const response = await this.$store.dispatch('orderEntry/changeShipDate', this.changeShipDateform.newShipDate);\n              this.$message({\n                dangerouslyUseHTMLString: true,\n                type: 'success',\n                message: this.$t('warehouse.orderEntry.changeShipDateShipmentsMoved')\n                  .replace('[totalShipmentsMoved]', response.data.total)\n                  .replace('[shipDate]', moment(this.changeShipDateform.newShipDate, constants.DATES.DEFAULT_BACKEND_FORMAT).format(constants.DATES.DEFAULT_DISPLAY_FORMAT))\n              });\n              this.dialogVisible = false;\n              this.$store.dispatch('orderEntry/search', {});\n              resolve(response);\n            } catch (error) {\n              reject(error);\n            } finally {\n              loading.close();\n            }\n          } else {\n            reject(new Error(this.$t('common.invalid')));\n          }\n        });\n      });\n    },\n    isVisible() {\n      const hasChangeShipDatePermission = this.$can(this.permissions.DATA_ENTRY.CHANGE_SHIP_DATE);\n      return this.hasOrderConsolidations && hasChangeShipDatePermission;\n    }\n  }\n};\n</script>\n<style rel=\"stylesheet/scss\" lang=\"scss\">\n#btn-change-ship-date {\n  color: #008d00;\n}\n\n.text-align-end {\n  text-align: end;\n}\n</style>\n"]}]}