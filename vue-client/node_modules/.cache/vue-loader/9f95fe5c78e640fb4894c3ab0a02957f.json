{"remainingRequest":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/spineor/Downloads/aelis4-web/vue-client/src/views/warehouse/extensionRequest/SearchFilter.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/spineor/Downloads/aelis4-web/vue-client/src/views/warehouse/extensionRequest/SearchFilter.vue","mtime":1565089924768},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from 'vuex';\nimport { Loading } from 'element-ui';\nimport constants from '@/utils/constants';\nimport apiConstants from '@/utils/apiConstants';\nimport Autocomplete from '@/components/Autocomplete';\n\nexport default {\n  name: 'SearchFilters',\n  components: { Autocomplete },\n  computed: {\n    ...mapGetters([\n      'orderEntry',\n      'user',\n      'shippers',\n    ])\n  },\n  data() {\n    return {\n      searchForm: {\n        shipper: '',\n        aelTerminal: '',\n        receivingdate: new Date(),\n        status: constants.ORDER_ENTRY.ORDER_STATUS[0].value,\n        orderNumber: null,\n        page: constants.TABLES.DEFAULT_PAGE\n      },\n      activeCollapsibleName: ['search-section'],\n      orderStatusOptions: constants.ORDER_ENTRY.ORDER_STATUS,\n      orderCreatedByOptions: constants.ORDER_ENTRY.CREATED_BY_OPTIONS,\n      urlConsignee: apiConstants.END_POINTS.ACCOUNTS.CONSIGNEE_BY_SHIPPER,\n      urlShipper: apiConstants.END_POINTS.ACCOUNTS.SHIPPERS\n      // value1: '',\n    };\n  },\n  methods: {\n       search(resetSearch) {\n      // If sarch text is changed or reset search is mandatory we call to resetShipperList\n      if ((this.searchText !== this.shippers.filters.search) || resetSearch) {\n        this.$store.dispatch('account/resetShipperList');\n      }\n      return this.$store.dispatch('account/getShipperListScroll', this.searchText);\n    },\n    async change(shipperSelected) {\n      this.$store.dispatch('setUserShipperAccount', shipperSelected);\n      const loading = Loading.service(constants.LOADING.DEFAULT_CONFIG);\n      await this.callSelectAction();\n      loading.close();\n      this.show = false;\n    },\n    openList() {\n      this.show = !this.show;\n      // Its necessary nextTick because we need to wait the component render.\n      if (this.show) {\n        this.$nextTick(() => {\n          this.$refs['search-shipper-list'].focus();\n        });\n      }\n    },\n    async callSelectAction() {\n      if (this.actionStrSelectChained) {\n        for (const action of this.actionStrSelectChained) {\n          if (action === 'orderEntry/getSettings') {\n            const res = await this.$store.dispatch(action);\n            this.orderEntry.settings.minCubesPerBox = res.__ob__.value.minCubesPerBox;\n            // this.orderEntry.settings.minCubesPerBox = res.__ob__.value.minCubesPerBox ? res.__ob__.value : '0.9461';\n          } else {\n            await this.$store.dispatch(action);\n          }\n        }\n      }\n    }\n  },\n  async mounted() {\n    const resetSearch = true;\n    if (this.user.shipperAccountNumber) {\n      this.callSelectAction();\n      // Call reset search but without loading because the shippers is already selected, and no need await.\n      this.search(resetSearch);\n    } else {\n      const loading = Loading.service(constants.LOADING.DEFAULT_CONFIG);\n      await this.search(resetSearch);\n      this.show = this.shippers.list && this.shippers.list.length > 1;\n\n      // SHIPPERS Users Normal Flow: If the list of shippers only returns 1, then we select it by default.\n      if (this.shippers.list && this.shippers.list.length === 1) {\n        this.change(this.shippers.list[0]);\n      }\n      loading.close();\n    }\n\n    // Its necessary nextTick because we need to wait the component render.\n    if (this.show) {\n      this.$nextTick(() => {\n        this.$refs['search-shipper-list'].focus();\n      });\n    }\n  }\n};\n",{"version":3,"sources":["SearchFilter.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SearchFilter.vue","sourceRoot":"src/views/warehouse/extensionRequest","sourcesContent":["<template>\n  <el-col :span=\"24\">\n    <el-collapse v-model=\"orderEntry.filtersOpen\">\n      <el-collapse-item\n        :title=\"$t('extensionRequest.searchSection')\"\n        name=\"search-section\"\n        id=\"search-section\"\n      >\n        <el-form\n          :model=\"searchForm\"\n          ref=\"searchForm\"\n          id=\"search\"\n          label-position=\"right\"\n          size=\"mini\"\n          inline\n        >\n          <el-form-item prop=\"shipper\" class=\"consignee-filter consignee-wrp\">\n            <autocomplete\n              :model.sync=\"searchForm.shipper\"\n              :strict=\"false\"\n              :url=\"urlShipper\"\n              :placeholder=\"$t('extensionRequest.shipper')\"\n              labelField=\"name\"\n              labelfieldSelected=\"name\"\n              valueField=\"id\"\n              valueFieldAdditional=\"name\"\n              :maxlength=\"8\"\n              id=\"search-shipper-list\"\n              ref=\"search-shipper-list\"\n            />\n          </el-form-item>\n          <el-form-item\n            class=\"aelTerminal\"\n            :label=\"$t('extensionRequest.aelTerminal')\"\n            prop=\"status\"\n          >\n            <el-select\n              v-model=\"searchForm.status\"\n              id=\"searchForm-status\"\n              ref=\"filter-status\"\n              @change=\"handleSearch\"\n            >\n              <el-option\n                v-for=\"item in orderStatusOptions\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\"\n              ></el-option>\n            </el-select>\n          </el-form-item>\n          <el-form-item\n            :label=\"$t('extensionRequest.receivingDate')\"\n            prop=\"shipDate\"\n            class=\"el_label receivingDate\"\n          >\n            <el-date-picker\n              ref=\"filter-datepicker\"\n              @change=\"handleChangeDate\"\n              v-model=\"searchForm.placeholder\"\n              format=\"MM/dd/yyyy\"\n              clearable\n              :placeholder=\"$t('extensionRequest.dateFormat')\"\n              :picker-options=\"orderEntry.shipDatePickerOptions\"\n              class=\"el-dropdown-new drop-sp date-dob\"\n              type=\"date\"\n              id=\"searchForm-ship-date\"\n            ></el-date-picker>\n          </el-form-item>\n          <el-form-item\n            :label=\"$t('extensionRequest.extensionStatus')\"\n            prop=\"status\"\n            class=\"title-input\"\n          >\n            <el-select\n              :placeholder=\"$t('extensionRequest.none')\"\n              v-model=\"searchForm.status\"\n              id=\"searchForm-status\"\n              ref=\"filter-status\"\n              @change=\"handleSearch\"\n            >\n              <el-option\n                v-for=\"item in orderStatusOptions\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\"\n              ></el-option>\n            </el-select>\n          </el-form-item>\n          <el-form-item prop=\"orderNumber\" class=\"el-input--mini-new-status ordernumber\">\n            <el-input\n              v-model=\"searchForm.orderNumber\"\n              ref=\"filter-order-number\"\n              v-alphanumeric-validation\n              maxlength=\"25\"\n              clearable\n              :placeholder=\"$t('extensionRequest.orderNumber')\"\n              @clear=\"handleSearch\"\n              v-on:keyup.enter.native=\"handleSearch\"\n              class=\"inline-input\"\n              id=\"searchForm-order-number\"\n            ></el-input>\n          </el-form-item>\n          <el-button class=\"el_button-new\">{{$t('extensionRequest.submit')}}</el-button>\n        </el-form>\n      </el-collapse-item>\n    </el-collapse>\n  </el-col>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport { Loading } from 'element-ui';\nimport constants from '@/utils/constants';\nimport apiConstants from '@/utils/apiConstants';\nimport Autocomplete from '@/components/Autocomplete';\n\nexport default {\n  name: 'SearchFilters',\n  components: { Autocomplete },\n  computed: {\n    ...mapGetters([\n      'orderEntry',\n      'user',\n      'shippers',\n    ])\n  },\n  data() {\n    return {\n      searchForm: {\n        shipper: '',\n        aelTerminal: '',\n        receivingdate: new Date(),\n        status: constants.ORDER_ENTRY.ORDER_STATUS[0].value,\n        orderNumber: null,\n        page: constants.TABLES.DEFAULT_PAGE\n      },\n      activeCollapsibleName: ['search-section'],\n      orderStatusOptions: constants.ORDER_ENTRY.ORDER_STATUS,\n      orderCreatedByOptions: constants.ORDER_ENTRY.CREATED_BY_OPTIONS,\n      urlConsignee: apiConstants.END_POINTS.ACCOUNTS.CONSIGNEE_BY_SHIPPER,\n      urlShipper: apiConstants.END_POINTS.ACCOUNTS.SHIPPERS\n      // value1: '',\n    };\n  },\n  methods: {\n       search(resetSearch) {\n      // If sarch text is changed or reset search is mandatory we call to resetShipperList\n      if ((this.searchText !== this.shippers.filters.search) || resetSearch) {\n        this.$store.dispatch('account/resetShipperList');\n      }\n      return this.$store.dispatch('account/getShipperListScroll', this.searchText);\n    },\n    async change(shipperSelected) {\n      this.$store.dispatch('setUserShipperAccount', shipperSelected);\n      const loading = Loading.service(constants.LOADING.DEFAULT_CONFIG);\n      await this.callSelectAction();\n      loading.close();\n      this.show = false;\n    },\n    openList() {\n      this.show = !this.show;\n      // Its necessary nextTick because we need to wait the component render.\n      if (this.show) {\n        this.$nextTick(() => {\n          this.$refs['search-shipper-list'].focus();\n        });\n      }\n    },\n    async callSelectAction() {\n      if (this.actionStrSelectChained) {\n        for (const action of this.actionStrSelectChained) {\n          if (action === 'orderEntry/getSettings') {\n            const res = await this.$store.dispatch(action);\n            this.orderEntry.settings.minCubesPerBox = res.__ob__.value.minCubesPerBox;\n            // this.orderEntry.settings.minCubesPerBox = res.__ob__.value.minCubesPerBox ? res.__ob__.value : '0.9461';\n          } else {\n            await this.$store.dispatch(action);\n          }\n        }\n      }\n    }\n  },\n  async mounted() {\n    const resetSearch = true;\n    if (this.user.shipperAccountNumber) {\n      this.callSelectAction();\n      // Call reset search but without loading because the shippers is already selected, and no need await.\n      this.search(resetSearch);\n    } else {\n      const loading = Loading.service(constants.LOADING.DEFAULT_CONFIG);\n      await this.search(resetSearch);\n      this.show = this.shippers.list && this.shippers.list.length > 1;\n\n      // SHIPPERS Users Normal Flow: If the list of shippers only returns 1, then we select it by default.\n      if (this.shippers.list && this.shippers.list.length === 1) {\n        this.change(this.shippers.list[0]);\n      }\n      loading.close();\n    }\n\n    // Its necessary nextTick because we need to wait the component render.\n    if (this.show) {\n      this.$nextTick(() => {\n        this.$refs['search-shipper-list'].focus();\n      });\n    }\n  }\n};\n</script>\n\n<style rel=\"stylesheet/scss\" lang=\"scss\">\n#search {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    label {\n      font-size: 10px;\n      padding-left: 15px;\n    }\n    .consignee-filter {\n        width: 30%;\n        white-space: nowrap;\n        margin-right: 0;\n        padding-right: 10px;\n        .el-form-item__content {\n            width: 100%;\n            .el-autocomplete {\n              width: 100%;\n            }\n        }\n    }\n    .aelTerminal {\n      width: 15%;\n      margin-right: 0 !important;\n      padding-right: 10px;\n      display: flex !important;\n      .el-form-item__content {\n         width: calc(100% - 92px);\n      }\n    }\n    .receivingDate {\n        width: 18%;\n         margin-right: 0 !important;\n      padding-right: 10px;\n      display: flex !important;\n        .el-form-item__content {\n         width: calc(100% - 99px);\n         .date-dob input {\n           width: 100%;\n         }\n        }\n    }\n    .title-input {\n      width: 18%;\n      display: flex;\n      margin: 0 !important;\n      padding-right: 10px;\n      .el-form-item__content {\n        width: calc(100% - 110px);\n      }\n    }\n    .ordernumber {\n         width: 15%;\n      margin: 0 !important;\n      margin-right: auto;\n      .el-form-item__content{\n        width: calc(96% - 48px);\n      }\n    }\n    #form-search-button {\n      margin-right: 10px;\n    }\n}\n\n.el_button-new {\n  height: 28px;\n    padding: 0 16px;\n    margin: 0px 0 0px -50px;\n    box-sizing: border-box;\n    float: right;\n    font-size: 12px;\n    border-color: #01355f;\n    color: #01355f;\n\n}\n.ordernumber input {\n  text-align: center;\n}\n.el-input__icon.el-icon-date {\n  display: none;\n}\n.date-dob {\n      width: auto !important;\n}\n.date-dob input {\n     padding: 0 13px !important;\n    width: 110px;\n    height: 28px;\n}\n\n.el_label {\n    line-height: 28px;\n    font-size: 10px;\n    color: #aba9a9;\n}\n@media only screen and (max-width: 1400px) {\n  #search {\n\n    .consignee-filter {\n        width: 20%;\n\n    }\n    .aelTerminal {\n      width: 17%;\n    }\n    .receivingDate {\n      width: 20%;\n    }\n    .title-input {\n      width: 21%;\n    }\n    .ordernumber {\n         width: 17%;\n    }\n  }\n}\n@media only screen and (max-width: 1365px) {\n  #search{\n\n    .consignee-filter {\n        width: 100%;\n        padding-right: 0;\n    }\n    .aelTerminal, .receivingDate, .title-input {\n         width: 33.333%;\n    }\n    .ordernumber {\n         width: calc(96% - 65px);\n         .el-form-item__content {\n            width: 100%;\n        }\n    }\n  }\n}\n@media only screen and (max-width: 767px) {\n  #search {\n    .aelTerminal, .receivingDate, .title-input, .aelTerminal .el-form-item__content .el-select, .receivingDate .el-date-editor, .title-input .el-select {\n         width: 100% !important;\n         padding-right: 0;\n    }\n    .title-input {\n      margin-bottom: 18px !important;\n    }\n  }\n}\n</style>\n"]}]}