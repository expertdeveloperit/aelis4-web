{"remainingRequest":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/spineor/Downloads/aelis4-web/vue-client/src/views/warehouse/orderEntry/TableSummary.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/spineor/Downloads/aelis4-web/vue-client/src/views/warehouse/orderEntry/TableSummary.vue","mtime":1566984596000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Message } from 'element-ui';\nimport moment from 'moment';\nimport { mapGetters } from 'vuex';\nimport constants from '@/utils/constants';\nimport apiConstants from '@/utils/apiConstants';\nimport Autocomplete from '@/components/Autocomplete';\nimport UnitsDetailDialog from './components/unitsDetail/UnitsDetailDialog';\nimport PrintUnitConsolidateLabel from './components/tableSummary/PrintUnitConsolidateLabel';\n\nexport default {\n  name: 'TableSummary',\n  components: { Autocomplete, UnitsDetailDialog, PrintUnitConsolidateLabel },\n  computed: {\n    ...mapGetters([\n      'orderEntry'\n    ])\n  },\n  filters: {\n    statusFilterType(id) {\n      return constants.ORDER_ENTRY.ORDER_STATUS.find(status => status.value === id).typeCss;\n    }\n  },\n  data() {\n    return {\n      editForm: {\n        id: null,\n        shipDate: null,\n        consigneeAccountId: null,\n        unitOfMeasureName: null,\n        measure: null,\n        numberUnits: null,\n        length: null,\n        width: null,\n        height: null,\n        productCode: '',\n        productDescription: '',\n        poNumber: '',\n        farmName: ''\n      },\n      editFormRules: {\n        consigneeAccountId: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.consigneeRequired'), trigger: 'submit' }\n        ],\n        length: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.lengthRequired'), trigger: 'blur' }\n        ],\n        width: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.widthRequired'), trigger: 'blur' }\n        ],\n        height: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.heightRequired'), trigger: 'blur' }\n        ]\n      },\n      finalizedId: constants.ORDER_ENTRY.ORDER_STATUS[2].value,\n      unitOfMeasureOptions: constants.ORDER_ENTRY.UNIT_OF_MEASURE_LIST,\n      measureOptions: constants.ORDER_ENTRY.MEASURE_LIST,\n      urlConsignee: apiConstants.END_POINTS.ACCOUNTS.CONSIGNEE_BY_SHIPPER,\n      urlProduct: apiConstants.END_POINTS.PRODUCT_SEARCH,\n      sizes: constants.TABLES.DEFAULT_LIMIT_SIZES,\n      extensionStatus: constants.ORDER_ENTRY.EXTENSION_STATUS,\n      urlFarmName: apiConstants.END_POINTS.ACCOUNTS.FARM_NAME_SEARCH\n    };\n  },\n  methods: {\n    handleSearchChangePage(val) {\n      this.$store.dispatch('orderEntry/search', { page: val });\n    },\n    handleSearchChangeLimit(val) {\n      this.$store.dispatch('orderEntry/search', { rows: val, page: constants.TABLES.DEFAULT_PAGE });\n    },\n    handleSortChange(data) {\n      let { prop } = data;\n      const { order } = data;\n      prop = constants.TABLES.ORDER_ENTRY.COLUMNS_MAP_SORT[prop] || prop;\n      this.$store.dispatch('orderEntry/search', { orderField: prop, orderDirection: constants.TABLES.ORDER_DIRECTION[order] });\n    },\n    handleEdit(row) {\n      this.$store.dispatch('orderEntry/setEditingRow', true);\n      row.edit = true;\n      this.editForm.id = row.id;\n      this.editForm.shipDate = row.shipDate;\n      this.editForm.consigneeAccountId = row.consigneeAccountId;\n      this.editForm.shipperAccountId = row.shipperAccountId;\n      this.editForm.unitOfMeasureName = row.unitOfMeasureName;\n      this.editForm.measure = row.measure;\n      this.editForm.numberUnits = row.numberUnits;\n      this.editForm.length = row.length;\n      this.editForm.width = row.width;\n      this.editForm.height = row.height;\n      this.editForm.productCode = row.productCode;\n      this.editForm.productDescription = row.productDescription;\n      this.editForm.poNumber = row.poNumber;\n      this.editForm.farmName = row.farmName;\n      this.editForm.status = row.status;\n      this.$nextTick(() => {\n        this.$refs['row-consignee'].setLocalModel(`${row.consigneeName} - ${row.consigneeAccount}`);\n        this.$refs['row-productCode'].setLocalModel(row.productCode);\n        this.$refs['row-farm-broker'].setLocalModel(row.farmName);\n        if (this.$refs['row-consignee'].$el) {\n          this.$refs['row-consignee'].$el.getElementsByTagName('input')[0].focus();\n        }\n      });\n    },\n    async handleUpdate() {\n      const minValue = this.orderEntry.settings.minCubesPerBox;\n      let { length, height, width } = this.editForm;\n      const { measure } = this.editForm.measure;\n      if (measure === constants.ORDER_ENTRY.MEASURE_LIST[1].value) {\n        length *= constants.ORDER_ENTRY.CONST_VALUE;\n        width *= constants.ORDER_ENTRY.CONST_VALUE;\n        height *= constants.ORDER_ENTRY.CONST_VALUE;\n      }\n      const volume = length * width * height;\n      if (volume <= minValue) {\n        let message = this.$t('warehouse.orderEntry.error.minValueValidationError');\n        message = message.replace('[unit]', this.editForm.numberUnits).replace('[minValue]', minValue);\n        const confirm = await this.$confirm(message, { confirmButtonText: this.$t('OK') });\n        if (confirm) { return this.getSubmitForm(); }\n        return false;\n      }\n      return this.getSubmitForm();\n    },\n    clearEdit() {\n      this.$store.dispatch('orderEntry/setEditingRow', false);\n      this.$refs.editForm.resetFields();\n      this.$refs['row-consignee'].clearLocalModel();\n      this.$refs['row-productCode'].clearLocalModel();\n      this.$refs['row-farm-broker'].clearLocalModel();\n    },\n    cancelEdit(row) {\n      row.edit = false;\n      this.clearEdit();\n    },\n    handleDelete(id, numberUnits, shipDate) {\n      let message = this.$t('warehouse.orderEntry.deleteConfirmation');\n      message = message.replace('[numberUnits]', numberUnits);\n      message = message.replace('[shipDate]', moment(shipDate, constants.DATES.DEFAULT_BACKEND_FORMAT).format(constants.DATES.DEFAULT_DISPLAY_FORMAT));\n      return this.$confirm(message, { confirmButtonText: this.$t('common.yes') })\n        .then(() => {\n          Message.closeAll();\n          const loading = this.$loading(constants.LOADING.DEFAULT_CONFIG);\n          this.$store.dispatch('orderEntry/delete', id).then((response) => {\n            loading.close();\n            this.$message.success(response.message);\n            this.$store.dispatch('orderEntry/search', {});\n          }).catch(() => {\n            loading.close();\n          });\n        })\n        .catch(() => {});\n    },\n    showEditButton(orderStatus) {\n      const hasEditPermission = this.$can(this.permissions.DATA_ENTRY.EDIT_AFTER_CUTOFF_FINALIZED, orderStatus)\n           || this.$can(this.permissions.DATA_ENTRY.EDIT_AFTER_CUTOFF_PENDING, orderStatus)\n           || this.$can(this.permissions.DATA_ENTRY.EDIT_BEFORE_CUTOFF_FINALIZED, orderStatus)\n           || this.$can(this.permissions.DATA_ENTRY.EDIT_BEFORE_CUTOFF_PENDING, orderStatus);\n      return !this.orderEntry.isEditingRow && hasEditPermission;\n    },\n    showDeleteButton(orderStatus) {\n      const hasDeletePermission = this.$can(this.permissions.DATA_ENTRY.DELETE_AFTER_CUTOFF_FINALIZED, orderStatus)\n           || this.$can(this.permissions.DATA_ENTRY.DELETE_AFTER_CUTOFF_PENDING, orderStatus)\n           || this.$can(this.permissions.DATA_ENTRY.DELETE_BEFORE_CUTOFF_FINALIZED, orderStatus)\n           || this.$can(this.permissions.DATA_ENTRY.DELETE_BEFORE_CUTOFF_PENDING, orderStatus);\n      return hasDeletePermission;\n    },\n    getSubmitForm() {\n      this.$refs.editForm.validate((valid, validationsErrors) => {\n        if (valid) {\n          Message.closeAll();\n          const loading = this.$loading(constants.LOADING.DEFAULT_CONFIG);\n          this.$store\n            .dispatch('orderEntry/update', {\n              unitsConsolidateId: this.editForm.id,\n              orderToUpdate: this.editForm\n            })\n            .then((response) => {\n              loading.close();\n              this.$message.success(response.message);\n              this.clearEdit();\n              this.$store.dispatch('orderEntry/search', {});\n            })\n            .catch(() => {\n              loading.close();\n            });\n        } else {\n          let errorMessage = '';\n          Object.keys(validationsErrors).forEach((key) => {\n            validationsErrors[key].forEach((validation) => {\n              errorMessage += `${validation.message}. `;\n            });\n          });\n          this.$message.warning(errorMessage);\n        }\n      });\n    }\n  },\n};\n",{"version":3,"sources":["TableSummary.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2VA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TableSummary.vue","sourceRoot":"src/views/warehouse/orderEntry","sourcesContent":["<template>\n  <div class=\"height-100-p\">\n    <el-form :model=\"editForm\" :rules=\"editFormRules\" ref=\"editForm\">\n    <el-table\n        :data=\"orderEntry.list\"\n        v-loading=\"orderEntry.loadingSearch\"\n        id=\"order-data-list\"\n        size=\"mini\"\n        tooltip-effect=\"dark\"\n        sortable\n        class=\"dark-blue-table\"\n        :empty-text=\"$t('common.notAbleToFindRecords')\"\n        @sort-change=\"handleSortChange\"\n        stripe>\n        <el-table-column\n            prop=\"orderNumber\"\n            sortable=\"custom\"\n            :min-width=\"15\"\n            align=\"center\"\n            :label=\"$t('warehouse.orderEntry.orderNumberShort')\">\n             <template slot-scope=\"scope\">\n              <el-tooltip class=\"item\" effect=\"dark\" :content=\"scope.row.orderNumber\" placement=\"top\">\n                <span> {{ scope.row.orderNumber }} </span>\n              </el-tooltip>\n            </template>\n        </el-table-column>\n        <el-table-column\n            prop=\"consignee\"\n            sortable=\"custom\"\n            :min-width=\"30\"\n            :label=\"$t('warehouse.orderEntry.consignee')\">\n            <template slot-scope=\"scope\">\n              <template v-if=\"scope.row.edit\">\n                <el-form-item prop=\"consigneeAccountId\">\n                  <autocomplete\n                      :model.sync=\"editForm.consigneeAccountId\"\n                      :shipperAccountId=\"orderEntry.settings.shipperAccountId\"\n                      labelFieldLastWithDash=\"number\"\n                      popperAppendToBody\n                      :url=\"urlConsignee\"\n                      labelField=\"name\"\n                      valueField=\"id\"\n                      id=\"row-consignee\"\n                      ref=\"row-consignee\" />\n                </el-form-item>\n              </template>\n              <template v-else>\n                <el-tooltip class=\"item\" effect=\"dark\" :content=\"`${scope.row.consigneeName} - ${ scope.row.consigneeAccount }`\" placement=\"top\">\n                  <span> {{ scope.row.consigneeName }} - {{ scope.row.consigneeAccount }}</span>\n                </el-tooltip>\n              </template>\n            </template>\n        </el-table-column>\n        <el-table-column\n            :min-width=\"10\"\n            prop=\"unitOfMeasure\"\n            :label=\"$t('warehouse.orderEntry.unitOfMeasureShort')\">\n            <template slot-scope=\"scope\">\n              <template v-if=\"scope.row.edit\">\n                <el-form-item prop=\"unitOfMeasureName\">\n                  <el-select v-model=\"editForm.unitOfMeasureName\" id=\"row-unitOfMeasureName\" ref=\"row-unitOfMeasureName\" size=\"mini\">\n                    <el-option\n                        v-for=\"item in unitOfMeasureOptions\"\n                        :key=\"item.value\"\n                        :label=\"item.label\"\n                        :value=\"item.value\">\n                        </el-option>\n                  </el-select>\n                </el-form-item>\n              </template>\n              <span v-else>{{scope.row.unitOfMeasureName}}</span>\n            </template>\n        </el-table-column>\n        <el-table-column\n            :min-width=\"8\"\n            prop=\"numberUnits\"\n            :label=\"$t('warehouse.orderEntry.numberOfUnitsShort')\">\n            <template slot-scope=\"scope\">\n              <template v-if=\"scope.row.edit && scope.row.status !== finalizedId\">\n                <el-form-item prop=\"numberUnits\">\n                  <el-input-number\n                      v-model=\"editForm.numberUnits\"\n                      v-numeric-validation\n                      :precision=\"0\"\n                      :min=\"1\" :max=\"999\"\n                      :maxlength=\"3\"\n                      :controls=\"false\"\n                      size=\"mini\"\n                      class=\"inline-input width-100p\"\n                      id=\"row-number-units\"\n                      ></el-input-number>\n                  </el-form-item>\n               </template>\n              <span v-else>{{scope.row.numberUnits}}</span>\n            </template>\n        </el-table-column>\n        <el-table-column\n            :min-width=\"10\"\n            prop=\"measure\"\n            :label=\"$t('warehouse.orderEntry.measure')\">\n            <template slot-scope=\"scope\">\n              <template v-if=\"scope.row.edit\">\n                <el-form-item prop=\"measure\">\n                  <el-select v-model=\"editForm.measure\" id=\"row-measure\" ref=\"row-measure\" size=\"mini\">\n                      <el-option\n                      v-for=\"item in measureOptions\"\n                      :key=\"item.value\"\n                      :label=\"item.label\"\n                      :value=\"item.value\">\n                      </el-option>\n                  </el-select>\n                </el-form-item>\n               </template>\n              <span v-else>{{scope.row.measure}}</span>\n            </template>\n        </el-table-column>\n        <el-table-column\n            prop=\"length\"\n            :min-width=\"8\"\n            :label=\"$t('warehouse.orderEntry.length')\">\n            <template slot-scope=\"scope\">\n              <template v-if=\"scope.row.edit\">\n                <el-form-item prop=\"length\">\n                  <el-input-number\n                      v-model=\"editForm.length\"\n                      v-numeric-validation\n                      :controls=\"false\"\n                      :precision=\"2\"\n                      :min=\"0\" :max=\"999.99\"\n                      size=\"mini\"\n                      class=\"inline-input width-100p\"\n                      id=\"row-length\"\n                      ref=\"row-length\"\n                      ></el-input-number>\n                </el-form-item>\n              </template>\n              <span v-else>{{scope.row.length}}</span>\n            </template>\n        </el-table-column>\n        <el-table-column\n            prop=\"width\"\n            :min-width=\"8\"\n            :label=\"$t('warehouse.orderEntry.width')\">\n            <template slot-scope=\"scope\">\n              <template v-if=\"scope.row.edit\">\n                <el-form-item prop=\"width\">\n                  <el-input-number\n                      v-model=\"editForm.width\"\n                      v-numeric-validation\n                      :controls=\"false\"\n                      :precision=\"2\"\n                      :min=\"0\" :max=\"999.99\"\n                      size=\"mini\"\n                      class=\"inline-input width-100p\"\n                      id=\"row-width\"\n                      ref=\"row-width\"\n                      ></el-input-number>\n                </el-form-item>\n              </template>\n              <span v-else>{{scope.row.width}}</span>\n            </template>\n        </el-table-column>\n        <el-table-column\n            prop=\"height\"\n            :min-width=\"8\"\n            :label=\"$t('warehouse.orderEntry.height')\">\n            <template slot-scope=\"scope\">\n              <template v-if=\"scope.row.edit\">\n                <el-form-item prop=\"height\">\n                  <el-input-number\n                      v-model=\"editForm.height\"\n                      v-numeric-validation\n                      :controls=\"false\"\n                      :precision=\"2\"\n                      :min=\"0\" :max=\"999.99\"\n                      size=\"mini\"\n                      class=\"inline-input width-100p\"\n                      id=\"row-height\"\n                      ref=\"row-height\"\n                      ></el-input-number>\n                </el-form-item>\n              </template>\n              <span v-else>{{scope.row.height}}</span>\n            </template>\n        </el-table-column>\n        <el-table-column\n            :min-width=\"10\"\n            prop=\"productCode\"\n            :label=\"$t('warehouse.orderEntry.product')\">\n            <template slot-scope=\"scope\">\n              <template v-if=\"scope.row.edit\">\n                <el-form-item prop=\"productCode\">\n                  <autocomplete\n                    :model.sync=\"editForm.productCode\"\n                    :modelAdditional.sync=\"editForm.productDescription\"\n                    popperAppendToBody\n                    :strict=\"false\"\n                    :url=\"urlProduct\"\n                    labelField=\"code\"\n                    labelFieldLastWithDash=\"description\"\n                    labelfieldSelected=\"code\"\n                    valueField=\"code\"\n                    valueFieldAdditional=\"description\"\n                    :maxlength=\"5\"\n                    id=\"row-productCode\"\n                    ref=\"row-productCode\"\n                    />\n                </el-form-item>\n              </template>\n              <span v-else>{{scope.row.productCode}}</span>\n            </template>\n        </el-table-column>\n        <el-table-column\n            prop=\"productDescription\"\n            sortable=\"custom\"\n            :min-width=\"23\"\n            :label=\"$t('warehouse.orderEntry.productDescription')\">\n            <template slot-scope=\"scope\">\n              <template v-if=\"scope.row.edit\">\n                <el-form-item prop=\"productDescription\">\n                  <el-input\n                      v-model=\"editForm.productDescription\"\n                      v-alphanumeric-validation\n                      clearable\n                      maxlength=\"30\"\n                      size=\"mini\"\n                      class=\"inline-input\"\n                      id=\"row-product-description\"\n                      ref=\"row-product-description\"\n                  ></el-input>\n                </el-form-item>\n              </template>\n              <template v-else>\n                <el-tooltip class=\"item\" effect=\"dark\" :content=\"scope.row.productDescription\" placement=\"top\">\n                  <span> {{ scope.row.productDescription }} </span>\n                </el-tooltip>\n              </template>\n            </template>\n        </el-table-column>\n        <el-table-column\n            :min-width=\"8\"\n            prop=\"poNumber\"\n            :label=\"$t('warehouse.orderEntry.poNumber')\">\n            <template slot-scope=\"scope\">\n              <template v-if=\"scope.row.edit\">\n                <el-form-item prop=\"poNumber\">\n                  <el-input\n                    v-model=\"editForm.poNumber\"\n                    v-alphanumeric-validation\n                    clearable\n                    maxlength=\"25\"\n                    size=\"mini\"\n                    class=\"inline-input\"\n                    id=\"row-po-number\"\n                    ref=\"row-po-number\"\n                    ></el-input>\n                </el-form-item>\n              </template>\n              <template v-else>\n                <el-tooltip class=\"item\" effect=\"dark\" :content=\"scope.row.poNumber\" placement=\"top\">\n                  <span> {{ scope.row.poNumber }} </span>\n                </el-tooltip>\n              </template>\n            </template>\n        </el-table-column>\n        <el-table-column\n            :min-width=\"15\"\n            prop=\"farmName\"\n            :label=\"$t('warehouse.orderEntry.farmBroker')\">\n            <template slot-scope=\"scope\">\n              <template v-if=\"scope.row.edit\">\n                <el-form-item prop=\"farmName\">\n                  <autocomplete\n                  :model.sync=\"editForm.farmName\"\n                  popperAppendToBody\n                  :strict=\"false\"\n                  :url=\"urlFarmName\"\n                  labelField=\"name\"\n                  labelfieldSelected=\"name\"\n                  valueField=\"id\"\n                  valueFieldAdditional=\"name\"\n                  :maxlength=\"100\"\n                  id=\"row-farm-broker\"\n                  ref=\"row-farm-broker\"\n                  />\n                  </el-form-item>\n              </template>\n              <template v-else>\n                <el-tooltip class=\"item\" effect=\"dark\" :content=\"scope.row.farmName\" placement=\"top\">\n                  <span> {{ scope.row.farmName }} </span>\n                </el-tooltip>\n              </template>\n            </template>\n        </el-table-column>\n        <el-table-column\n            align=\"center\"\n            :min-width=\"9\"\n            prop=\"status\"\n            :label=\"$t('warehouse.orderEntry.finalized')\">\n            <template slot-scope=\"scope\">\n             <span class=\"icon-status-span\">\n                <i  v-if=\"scope.row.status === finalizedId\" class=\"el-icon-success green-success\"></i>\n             </span>\n             <span class=\"icon-status-span\">\n               <el-tooltip v-if=\"scope.row.lastExtensionNumber\" class=\"item\" effect=\"dark\" :content=\"`${extensionStatus[scope.row.lastExtensionStatus].name} - ${scope.row.lastExtensionNumber}`\" placement=\"top-start\">\n                  <i class=\"far fa-clock\"  :class=\"extensionStatus[scope.row.lastExtensionStatus].colorCssClass\"></i>\n               </el-tooltip>\n             </span>\n            </template>\n        </el-table-column>\n         <el-table-column  :min-width=\"15\" :label=\"$t('common.options')\" align=\"center\" class-name=\"fixed-width\">\n           <template slot-scope=\"scope\">\n              <el-tooltip v-if=\"showEditButton(scope.row.status)\" class=\"item\" effect=\"dark\" :enterable=\"false\" :content=\"$t('warehouse.orderEntry.edit')\" placement=\"top-start\">\n                <i class=\"el-icon-edit icon-action\" @click=\"handleEdit(scope.row)\"></i>\n              </el-tooltip>\n              <template v-else-if=\"scope.row.edit\">\n                <el-button icon=\"el-icon-success\" circle size=\"mini\" @click=\"handleUpdate()\"></el-button>\n                <el-button icon=\"el-icon-circle-close\" circle size=\"mini\" @click=\"cancelEdit(scope.row)\"></el-button>\n              </template>\n              <template v-if=\"!scope.row.edit\">\n                <el-tooltip v-if=\"scope.row.status === finalizedId\" class=\"item\" effect=\"dark\" :enterable=\"false\" :content=\"$t('warehouse.orderEntry.details')\" placement=\"top-start\">\n                  <units-detail-dialog :unitsConsolidateId=\"scope.row.id\"/>\n                </el-tooltip>\n                <el-tooltip v-if=\"scope.row.status === finalizedId\" :unitsConsolidateId=\"scope.row.id\" class=\"item\" effect=\"dark\" :enterable=\"false\" :content=\"$t('warehouse.orderEntry.print')\" placement=\"top-start\">\n                  <print-unit-consolidate-label :unitsConsolidateId=\"scope.row.id\" :labelPrinted.sync=\"scope.row.labelPrinted\" />\n                </el-tooltip>\n                <el-tooltip v-if=\"showDeleteButton(scope.row.status)\" class=\"item\" effect=\"dark\" :enterable=\"false\" :content=\"$t('warehouse.orderEntry.delete')\" placement=\"top-start\">\n                  <i class=\"el-icon-delete icon-action\" type=\"primary\" size=\"mini\" @click=\"handleDelete(scope.row.id, scope.row.numberUnits, scope.row.shipDate)\"></i>\n                </el-tooltip>\n              </template>\n           </template>\n        </el-table-column>\n    </el-table>\n    </el-form>\n     <el-pagination v-show=\"orderEntry.total > 0\"\n      @size-change=\"handleSearchChangeLimit\"\n      :page-sizes=\"sizes\"\n      :page-size=\"orderEntry.actualFilters.rows\"\n      :current-page.sync=\"orderEntry.actualFilters.page\"\n      @current-change=\"handleSearchChangePage\"\n      layout=\"total, sizes, prev, pager, next, jumper\"\n      :total=\"orderEntry.total\">\n    </el-pagination>\n</div>\n</template>\n\n<script>\nimport { Message } from 'element-ui';\nimport moment from 'moment';\nimport { mapGetters } from 'vuex';\nimport constants from '@/utils/constants';\nimport apiConstants from '@/utils/apiConstants';\nimport Autocomplete from '@/components/Autocomplete';\nimport UnitsDetailDialog from './components/unitsDetail/UnitsDetailDialog';\nimport PrintUnitConsolidateLabel from './components/tableSummary/PrintUnitConsolidateLabel';\n\nexport default {\n  name: 'TableSummary',\n  components: { Autocomplete, UnitsDetailDialog, PrintUnitConsolidateLabel },\n  computed: {\n    ...mapGetters([\n      'orderEntry'\n    ])\n  },\n  filters: {\n    statusFilterType(id) {\n      return constants.ORDER_ENTRY.ORDER_STATUS.find(status => status.value === id).typeCss;\n    }\n  },\n  data() {\n    return {\n      editForm: {\n        id: null,\n        shipDate: null,\n        consigneeAccountId: null,\n        unitOfMeasureName: null,\n        measure: null,\n        numberUnits: null,\n        length: null,\n        width: null,\n        height: null,\n        productCode: '',\n        productDescription: '',\n        poNumber: '',\n        farmName: ''\n      },\n      editFormRules: {\n        consigneeAccountId: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.consigneeRequired'), trigger: 'submit' }\n        ],\n        length: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.lengthRequired'), trigger: 'blur' }\n        ],\n        width: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.widthRequired'), trigger: 'blur' }\n        ],\n        height: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.heightRequired'), trigger: 'blur' }\n        ]\n      },\n      finalizedId: constants.ORDER_ENTRY.ORDER_STATUS[2].value,\n      unitOfMeasureOptions: constants.ORDER_ENTRY.UNIT_OF_MEASURE_LIST,\n      measureOptions: constants.ORDER_ENTRY.MEASURE_LIST,\n      urlConsignee: apiConstants.END_POINTS.ACCOUNTS.CONSIGNEE_BY_SHIPPER,\n      urlProduct: apiConstants.END_POINTS.PRODUCT_SEARCH,\n      sizes: constants.TABLES.DEFAULT_LIMIT_SIZES,\n      extensionStatus: constants.ORDER_ENTRY.EXTENSION_STATUS,\n      urlFarmName: apiConstants.END_POINTS.ACCOUNTS.FARM_NAME_SEARCH\n    };\n  },\n  methods: {\n    handleSearchChangePage(val) {\n      this.$store.dispatch('orderEntry/search', { page: val });\n    },\n    handleSearchChangeLimit(val) {\n      this.$store.dispatch('orderEntry/search', { rows: val, page: constants.TABLES.DEFAULT_PAGE });\n    },\n    handleSortChange(data) {\n      let { prop } = data;\n      const { order } = data;\n      prop = constants.TABLES.ORDER_ENTRY.COLUMNS_MAP_SORT[prop] || prop;\n      this.$store.dispatch('orderEntry/search', { orderField: prop, orderDirection: constants.TABLES.ORDER_DIRECTION[order] });\n    },\n    handleEdit(row) {\n      this.$store.dispatch('orderEntry/setEditingRow', true);\n      row.edit = true;\n      this.editForm.id = row.id;\n      this.editForm.shipDate = row.shipDate;\n      this.editForm.consigneeAccountId = row.consigneeAccountId;\n      this.editForm.shipperAccountId = row.shipperAccountId;\n      this.editForm.unitOfMeasureName = row.unitOfMeasureName;\n      this.editForm.measure = row.measure;\n      this.editForm.numberUnits = row.numberUnits;\n      this.editForm.length = row.length;\n      this.editForm.width = row.width;\n      this.editForm.height = row.height;\n      this.editForm.productCode = row.productCode;\n      this.editForm.productDescription = row.productDescription;\n      this.editForm.poNumber = row.poNumber;\n      this.editForm.farmName = row.farmName;\n      this.editForm.status = row.status;\n      this.$nextTick(() => {\n        this.$refs['row-consignee'].setLocalModel(`${row.consigneeName} - ${row.consigneeAccount}`);\n        this.$refs['row-productCode'].setLocalModel(row.productCode);\n        this.$refs['row-farm-broker'].setLocalModel(row.farmName);\n        if (this.$refs['row-consignee'].$el) {\n          this.$refs['row-consignee'].$el.getElementsByTagName('input')[0].focus();\n        }\n      });\n    },\n    async handleUpdate() {\n      const minValue = this.orderEntry.settings.minCubesPerBox;\n      let { length, height, width } = this.editForm;\n      const { measure } = this.editForm.measure;\n      if (measure === constants.ORDER_ENTRY.MEASURE_LIST[1].value) {\n        length *= constants.ORDER_ENTRY.CONST_VALUE;\n        width *= constants.ORDER_ENTRY.CONST_VALUE;\n        height *= constants.ORDER_ENTRY.CONST_VALUE;\n      }\n      const volume = length * width * height;\n      if (volume <= minValue) {\n        let message = this.$t('warehouse.orderEntry.error.minValueValidationError');\n        message = message.replace('[unit]', this.editForm.numberUnits).replace('[minValue]', minValue);\n        const confirm = await this.$confirm(message, { confirmButtonText: this.$t('OK') });\n        if (confirm) { return this.getSubmitForm(); }\n        return false;\n      }\n      return this.getSubmitForm();\n    },\n    clearEdit() {\n      this.$store.dispatch('orderEntry/setEditingRow', false);\n      this.$refs.editForm.resetFields();\n      this.$refs['row-consignee'].clearLocalModel();\n      this.$refs['row-productCode'].clearLocalModel();\n      this.$refs['row-farm-broker'].clearLocalModel();\n    },\n    cancelEdit(row) {\n      row.edit = false;\n      this.clearEdit();\n    },\n    handleDelete(id, numberUnits, shipDate) {\n      let message = this.$t('warehouse.orderEntry.deleteConfirmation');\n      message = message.replace('[numberUnits]', numberUnits);\n      message = message.replace('[shipDate]', moment(shipDate, constants.DATES.DEFAULT_BACKEND_FORMAT).format(constants.DATES.DEFAULT_DISPLAY_FORMAT));\n      return this.$confirm(message, { confirmButtonText: this.$t('common.yes') })\n        .then(() => {\n          Message.closeAll();\n          const loading = this.$loading(constants.LOADING.DEFAULT_CONFIG);\n          this.$store.dispatch('orderEntry/delete', id).then((response) => {\n            loading.close();\n            this.$message.success(response.message);\n            this.$store.dispatch('orderEntry/search', {});\n          }).catch(() => {\n            loading.close();\n          });\n        })\n        .catch(() => {});\n    },\n    showEditButton(orderStatus) {\n      const hasEditPermission = this.$can(this.permissions.DATA_ENTRY.EDIT_AFTER_CUTOFF_FINALIZED, orderStatus)\n           || this.$can(this.permissions.DATA_ENTRY.EDIT_AFTER_CUTOFF_PENDING, orderStatus)\n           || this.$can(this.permissions.DATA_ENTRY.EDIT_BEFORE_CUTOFF_FINALIZED, orderStatus)\n           || this.$can(this.permissions.DATA_ENTRY.EDIT_BEFORE_CUTOFF_PENDING, orderStatus);\n      return !this.orderEntry.isEditingRow && hasEditPermission;\n    },\n    showDeleteButton(orderStatus) {\n      const hasDeletePermission = this.$can(this.permissions.DATA_ENTRY.DELETE_AFTER_CUTOFF_FINALIZED, orderStatus)\n           || this.$can(this.permissions.DATA_ENTRY.DELETE_AFTER_CUTOFF_PENDING, orderStatus)\n           || this.$can(this.permissions.DATA_ENTRY.DELETE_BEFORE_CUTOFF_FINALIZED, orderStatus)\n           || this.$can(this.permissions.DATA_ENTRY.DELETE_BEFORE_CUTOFF_PENDING, orderStatus);\n      return hasDeletePermission;\n    },\n    getSubmitForm() {\n      this.$refs.editForm.validate((valid, validationsErrors) => {\n        if (valid) {\n          Message.closeAll();\n          const loading = this.$loading(constants.LOADING.DEFAULT_CONFIG);\n          this.$store\n            .dispatch('orderEntry/update', {\n              unitsConsolidateId: this.editForm.id,\n              orderToUpdate: this.editForm\n            })\n            .then((response) => {\n              loading.close();\n              this.$message.success(response.message);\n              this.clearEdit();\n              this.$store.dispatch('orderEntry/search', {});\n            })\n            .catch(() => {\n              loading.close();\n            });\n        } else {\n          let errorMessage = '';\n          Object.keys(validationsErrors).forEach((key) => {\n            validationsErrors[key].forEach((validation) => {\n              errorMessage += `${validation.message}. `;\n            });\n          });\n          this.$message.warning(errorMessage);\n        }\n      });\n    }\n  },\n};\n</script>\n\n<style rel=\"stylesheet/scss\" lang=\"scss\">\n</style>\n"]}]}