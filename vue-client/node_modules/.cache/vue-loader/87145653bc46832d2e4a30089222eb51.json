{"remainingRequest":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/spineor/Downloads/aelis4-web/vue-client/src/views/warehouse/orderEntry/components/AddDialog.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/spineor/Downloads/aelis4-web/vue-client/src/views/warehouse/orderEntry/components/AddDialog.vue","mtime":1566984596000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Message } from 'element-ui';\nimport moment from 'moment';\nimport { mapGetters } from 'vuex';\nimport constants from '@/utils/constants';\nimport apiConstants from '@/utils/apiConstants';\nimport Autocomplete from '@/components/Autocomplete';\n\nconst formConsignee = 'form-consignee';\n\nexport default {\n  components: { Autocomplete },\n  computed: {\n    ...mapGetters([\n      'orderEntry'\n    ])\n  },\n  data() {\n    return {\n      dialogVisible: false,\n      form: {\n        consigneeAccountId: null,\n        unitOfMeasure: constants.ORDER_ENTRY.UNIT_OF_MEASURE_LIST[0].value,\n        measure: constants.ORDER_ENTRY.MEASURE_LIST[0].value,\n        shipDate: new Date(),\n        totalUnits: null,\n        length: null,\n        width: null,\n        height: null,\n        productCode: '',\n        productDescription: '',\n        po: '',\n        farmName: ''\n      },\n      formRules: {\n        consigneeAccountId: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.consigneeRequired'), trigger: 'submit' }\n        ],\n        unitOfMeasure: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.unitOfMeasureRequired'), trigger: 'blur' }\n        ],\n        shipDate: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.shipDateRequired'), trigger: 'blur' }\n        ],\n        length: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.lengthRequired'), trigger: 'blur' }\n        ],\n        width: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.widthRequired'), trigger: 'blur' }\n        ],\n        height: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.heightRequired'), trigger: 'blur' }\n        ],\n        totalUnits: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.numberUnitsRequired'), trigger: 'blur' }\n        ]\n      },\n      unitOfMeasureOptions: constants.ORDER_ENTRY.UNIT_OF_MEASURE_LIST,\n      measureOptions: constants.ORDER_ENTRY.MEASURE_LIST,\n      urlConsignee: apiConstants.END_POINTS.ACCOUNTS.CONSIGNEE_BY_SHIPPER,\n      urlProduct: apiConstants.END_POINTS.PRODUCT_SEARCH,\n      urlFarmName: apiConstants.END_POINTS.ACCOUNTS.FARM_NAME_SEARCH\n    };\n  },\n  methods: {\n    handleOpen() {\n      this.form.shipDate = moment(this.orderEntry.actualFilters.shipDate, 'YYYY-MM-DD').toDate();\n      this.$nextTick(() => {\n        this.form.consigneeAccountId = this.orderEntry.actualFilters.consigneeAccountId;\n        this.$refs[formConsignee].setLocalModel(this.orderEntry.actualFilters.consigneeName);\n        this.$refs.form.$el[0].focus();\n      });\n    },\n    handleClose(done) {\n      this.resetForm();\n      done();\n    },\n    async submitForm() {\n      const minValue = this.orderEntry.settings.minCubesPerBox;\n\n      let { length, width, height } = this.form;\n\n      if (this.form.measure === constants.ORDER_ENTRY.MEASURE_LIST[1].value) {\n        length = this.form.length * constants.ORDER_ENTRY.INCH_CONVERSION_VALUE;\n        width = this.form.width * constants.ORDER_ENTRY.INCH_CONVERSION_VALUE;\n        height = this.form.height * constants.ORDER_ENTRY.INCH_CONVERSION_VALUE;\n      }\n\n      const volume = length * width * height;\n      if (volume <= minValue) {\n        let message = this.$t('warehouse.orderEntry.error.minValueValidationError');\n        message = message.replace('[unit]', this.$refs.unit.value).replace('[minValue]', minValue);\n        const confirm = await this.$confirm(message, { confirmButtonText: this.$t('OK') });\n        if (confirm) {\n          return this.getSubmitForm();\n        }\n        return false;\n      }\n      return this.getSubmitForm();\n    },\n    resetForm() {\n      this.$refs.form.resetFields();\n      this.form.consigneeId = null;\n      this.form.productCode = '';\n      this.form.productDescription = '';\n      this.$refs['form-product'].clearLocalModel();\n      this.$refs[formConsignee].clearLocalModel();\n      this.$refs['form-farm-name'].clearLocalModel();\n      this.form.shipDate = moment(this.orderEntry.actualFilters.shipDate, 'YYYY-MM-DD').toDate();\n      this.$nextTick(() => {\n        this.form.consigneeAccountId = this.orderEntry.actualFilters.consigneeAccountId;\n        this.$refs[formConsignee].setLocalModel(this.orderEntry.actualFilters.consigneeName);\n      });\n      this.$refs.form.$el[0].focus();\n    },\n    /* The datepicker has an issue when change manually, the focus is lost. */\n    handleChangeDate() {\n      this.$refs.form.$el[4].focus();\n    },\n    isVisible() {\n      return this.$can(this.permissions.DATA_ENTRY.ADD_SHIPMENT) || this.$can(this.permissions.DATA_ENTRY.ADD_SHIPMENT_AFTER_CUTOFF);\n    },\n    getSubmitForm() {\n      return new Promise((resolve, reject) => {\n        this.$refs.form.validate((valid) => {\n          if (valid) {\n            Message.closeAll();\n            const loading = this.$loading(constants.LOADING.DEFAULT_CONFIG);\n            this.$store\n              .dispatch('orderEntry/save', this.form)\n              .then((response) => {\n                loading.close();\n                this.$message.success(response.message);\n                this.resetForm();\n                this.$refs.form.$el[0].focus();\n                this.$store.dispatch('orderEntry/search', {});\n                resolve(response);\n              })\n              .catch((error) => {\n                loading.close();\n                reject(error);\n              });\n          } else {\n            reject(new Error(this.$t('common.invalid')));\n          }\n        });\n      });\n    }\n  }\n};\n",{"version":3,"sources":["AddDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6LA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AddDialog.vue","sourceRoot":"src/views/warehouse/orderEntry/components","sourcesContent":["<template>\n<span v-if=\"isVisible()\">\n  <el-button id=\"btn-add-order\" type=\"success\" plain @click=\"dialogVisible = true\" size=\"mini\">{{ $t('warehouse.orderEntry.addOrder') }}</el-button>\n  <el-dialog\n  :close-on-click-modal=\"false\"\n  v-on:open=\"handleOpen\"\n  :title=\"$t('warehouse.orderEntry.addOrder')\"\n  :visible.sync=\"dialogVisible\"\n  width=\"85%\"\n  class=\"dialog-with-cols\"\n  :before-close=\"handleClose\">\n  <el-form :model=\"form\" :rules=\"formRules\" ref=\"form\" label-position=\"top\" size=\"mini\">\n      <el-row>\n          <el-col :md=\"9\" :sm=\"12\" :xs=\"24\" class=\"form-vertical-item\">\n              <el-form-item :label=\"$t('warehouse.orderEntry.consignee')\" prop=\"consigneeAccountId\">\n                  <autocomplete :model.sync=\"form.consigneeAccountId\"\n                      :url=\"urlConsignee\"\n                      :shipperAccountId=\"orderEntry.settings.shipperAccountId\"\n                      labelField=\"name\"\n                      labelFieldLastWithDash=\"number\"\n                      valueField=\"id\"\n                      id=\"form-consignee\"\n                      ref=\"form-consignee\" />\n              </el-form-item>\n          </el-col>\n          <el-col :md=\"5\" :sm=\"12\" :xs=\"12\" class=\"form-vertical-item\">\n              <el-form-item :label=\"$t('warehouse.orderEntry.shipDate')\" prop=\"shipDate\">\n                  <el-date-picker\n                  v-model=\"form.shipDate\"\n                  @change=\"handleChangeDate\"\n                  :default-value=\"orderEntry.actualFilters.shipDate\"\n                  style=\"width: 100%\"\n                  format=\"MM/dd/yyyy\"\n                  :picker-options=\"orderEntry.shipDatePickerOptions\"\n                  type=\"date\"\n                  id=\"form-ship-date\">\n                  </el-date-picker>\n              </el-form-item>\n          </el-col>\n          <el-col :md=\"3\" :sm=\"12\" :xs=\"12\" class=\"form-vertical-item\">\n              <el-form-item :label=\"$t('warehouse.orderEntry.numberOfUnitsShort')\"  prop=\"totalUnits\">\n                  <el-input-number\n                  v-model=\"form.totalUnits\"\n                  v-numeric-validation\n                  :precision=\"0\"\n                  :min=\"0\" :max=\"999\"\n                  class=\"inline-input width-100p\"\n                  id=\"form-number-units\"\n                  ref=\"unit\"\n                  ></el-input-number>\n              </el-form-item>\n          </el-col>\n          <el-col :md=\"4\" :sm=\"12\" :xs=\"12\" class=\"form-vertical-item\">\n              <el-form-item :label=\"$t('warehouse.orderEntry.farmName')\" prop=\"farmName\">\n                  <autocomplete\n                  :model.sync=\"form.farmName\"\n                  :strict=\"false\"\n                  :url=\"urlFarmName\"\n                  labelField=\"name\"\n                  labelfieldSelected=\"name\"\n                  valueField=\"id\"\n                  valueFieldAdditional=\"name\"\n                  :maxlength=\"100\"\n                  id=\"form-farm-name\"\n                  ref=\"form-farm-name\"\n                  />\n              </el-form-item>\n          </el-col>\n          <el-col :md=\"3\" :sm=\"12\" :xs=\"12\" class=\"form-vertical-item\">\n              <el-form-item :label=\"$t('warehouse.orderEntry.poNumber')\" prop=\"po\">\n                  <el-input\n                  v-model=\"form.po\"\n                  v-alphanumeric-validation\n                  maxlength=\"25\"\n                  clearable\n                  class=\"inline-input\"\n                  id=\"form-po-number\"\n                  ></el-input>\n              </el-form-item>\n          </el-col>\n      </el-row>\n      <el-row>\n          <el-col :md=\"4\" :sm=\"12\" :xs=\"12\" class=\"form-vertical-item\">\n              <el-form-item :label=\"$t('warehouse.orderEntry.unitOfMeasure')\" prop=\"unitOfMeasure\">\n                  <el-select v-model=\"form.unitOfMeasure\" id=\"form-unit-of-measure\" >\n                      <el-option\n                      v-for=\"item in unitOfMeasureOptions\"\n                      :key=\"item.value\"\n                      :label=\"item.label\"\n                      :value=\"item.value\">\n                      </el-option>\n                  </el-select>\n              </el-form-item>\n          </el-col>\n          <el-col :md=\"3\" :sm=\"12\" :xs=\"12\" class=\"form-vertical-item\">\n              <el-form-item :label=\"$t('warehouse.orderEntry.measure')\" prop=\"measure\">\n                  <el-select v-model=\"form.measure\" id=\"form-measure\">\n                      <el-option\n                      v-for=\"item in measureOptions\"\n                      :key=\"item.value\"\n                      :label=\"item.label\"\n                      :value=\"item.value\">\n                      </el-option>\n                  </el-select>\n            </el-form-item>\n          </el-col>\n          <el-col :md=\"2\" :sm=\"12\" :xs=\"12\" class=\"form-vertical-item\">\n              <el-form-item :label=\"$t('warehouse.orderEntry.length')\" prop=\"length\">\n                  <el-input-number\n                  v-model=\"form.length\"\n                  v-numeric-validation\n                  :controls=\"false\"\n                  :precision=\"2\"\n                  :min=\"0\" :max=\"999.99\"\n                  class=\"inline-input width-100p\"\n                  id=\"form-length\"\n                  ref=\"length\"\n                  ></el-input-number>\n              </el-form-item>\n          </el-col>\n          <el-col :md=\"2\" :sm=\"12\" :xs=\"12\" class=\"form-vertical-item\">\n              <el-form-item :label=\"$t('warehouse.orderEntry.width')\"  prop=\"width\">\n                  <el-input-number\n                  v-model=\"form.width\"\n                  v-numeric-validation\n                  :controls=\"false\"\n                  :precision=\"2\"\n                  :min=\"0\" :max=\"999.99\"\n                  class=\"inline-input width-100p\"\n                  id=\"form-width\"\n                  ref=\"width\"\n                  ></el-input-number>\n              </el-form-item>\n          </el-col>\n          <el-col :md=\"2\" :sm=\"12\" :xs=\"12\" class=\"form-vertical-item\">\n              <el-form-item :label=\"$t('warehouse.orderEntry.height')\" prop=\"height\">\n                  <el-input-number\n                  v-model=\"form.height\"\n                  v-numeric-validation\n                  :controls=\"false\"\n                  :precision=\"2\"\n                  :min=\"0\" :max=\"999.99\"\n                  class=\"inline-input width-100p\"\n                  id=\"form-height\"\n                  ref=\"height\"\n                  ></el-input-number>\n              </el-form-item>\n          </el-col>\n          <el-col :md=\"4\" :sm=\"12\" :xs=\"12\" class=\"form-vertical-item\">\n              <el-form-item :label=\"$t('warehouse.orderEntry.product')\" prop=\"productCode\">\n                  <autocomplete\n                  :model.sync=\"form.productCode\"\n                  :modelAdditional.sync=\"form.productDescription\"\n                  :strict=\"false\"\n                  :url=\"urlProduct\"\n                  labelField=\"code\"\n                  labelFieldLastWithDash=\"description\"\n                  labelfieldSelected=\"code\"\n                  valueField=\"code\"\n                  valueFieldAdditional=\"description\"\n                  :maxlength=\"5\"\n                  id=\"form-product\"\n                  ref=\"form-product\"\n                  />\n              </el-form-item>\n          </el-col>\n          <el-col :md=\"7\" :sm=\"24\" :xs=\"24\" class=\"form-vertical-item\">\n              <el-form-item :label=\"$t('warehouse.orderEntry.productDescription')\" prop=\"productDescription\">\n                  <el-input\n                      v-model=\"form.productDescription\"\n                      v-alphanumeric-validation\n                      maxlength=\"30\"\n                      clearable\n                      class=\"inline-input\"\n                      id=\"form-product-description\"\n                  ></el-input>\n              </el-form-item>\n          </el-col>\n      </el-row>\n  </el-form>\n  <div id=\"add-dialog-footer\" slot=\"footer\" class=\"dialog-footer form-vertical-item\">\n      <el-button type=\"primary\" id=\"form-save-button\" @click=\"submitForm()\" size=\"mini\">{{ $t('warehouse.orderEntry.addOrder') }}</el-button>\n      <el-button id=\"form-refresh-button\" @click=\"resetForm()\" size=\"mini\">{{ $t('warehouse.orderEntry.clear') }}</el-button>\n  </div>\n  </el-dialog>\n</span>\n</template>\n\n<script>\nimport { Message } from 'element-ui';\nimport moment from 'moment';\nimport { mapGetters } from 'vuex';\nimport constants from '@/utils/constants';\nimport apiConstants from '@/utils/apiConstants';\nimport Autocomplete from '@/components/Autocomplete';\n\nconst formConsignee = 'form-consignee';\n\nexport default {\n  components: { Autocomplete },\n  computed: {\n    ...mapGetters([\n      'orderEntry'\n    ])\n  },\n  data() {\n    return {\n      dialogVisible: false,\n      form: {\n        consigneeAccountId: null,\n        unitOfMeasure: constants.ORDER_ENTRY.UNIT_OF_MEASURE_LIST[0].value,\n        measure: constants.ORDER_ENTRY.MEASURE_LIST[0].value,\n        shipDate: new Date(),\n        totalUnits: null,\n        length: null,\n        width: null,\n        height: null,\n        productCode: '',\n        productDescription: '',\n        po: '',\n        farmName: ''\n      },\n      formRules: {\n        consigneeAccountId: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.consigneeRequired'), trigger: 'submit' }\n        ],\n        unitOfMeasure: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.unitOfMeasureRequired'), trigger: 'blur' }\n        ],\n        shipDate: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.shipDateRequired'), trigger: 'blur' }\n        ],\n        length: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.lengthRequired'), trigger: 'blur' }\n        ],\n        width: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.widthRequired'), trigger: 'blur' }\n        ],\n        height: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.heightRequired'), trigger: 'blur' }\n        ],\n        totalUnits: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.numberUnitsRequired'), trigger: 'blur' }\n        ]\n      },\n      unitOfMeasureOptions: constants.ORDER_ENTRY.UNIT_OF_MEASURE_LIST,\n      measureOptions: constants.ORDER_ENTRY.MEASURE_LIST,\n      urlConsignee: apiConstants.END_POINTS.ACCOUNTS.CONSIGNEE_BY_SHIPPER,\n      urlProduct: apiConstants.END_POINTS.PRODUCT_SEARCH,\n      urlFarmName: apiConstants.END_POINTS.ACCOUNTS.FARM_NAME_SEARCH\n    };\n  },\n  methods: {\n    handleOpen() {\n      this.form.shipDate = moment(this.orderEntry.actualFilters.shipDate, 'YYYY-MM-DD').toDate();\n      this.$nextTick(() => {\n        this.form.consigneeAccountId = this.orderEntry.actualFilters.consigneeAccountId;\n        this.$refs[formConsignee].setLocalModel(this.orderEntry.actualFilters.consigneeName);\n        this.$refs.form.$el[0].focus();\n      });\n    },\n    handleClose(done) {\n      this.resetForm();\n      done();\n    },\n    async submitForm() {\n      const minValue = this.orderEntry.settings.minCubesPerBox;\n\n      let { length, width, height } = this.form;\n\n      if (this.form.measure === constants.ORDER_ENTRY.MEASURE_LIST[1].value) {\n        length = this.form.length * constants.ORDER_ENTRY.INCH_CONVERSION_VALUE;\n        width = this.form.width * constants.ORDER_ENTRY.INCH_CONVERSION_VALUE;\n        height = this.form.height * constants.ORDER_ENTRY.INCH_CONVERSION_VALUE;\n      }\n\n      const volume = length * width * height;\n      if (volume <= minValue) {\n        let message = this.$t('warehouse.orderEntry.error.minValueValidationError');\n        message = message.replace('[unit]', this.$refs.unit.value).replace('[minValue]', minValue);\n        const confirm = await this.$confirm(message, { confirmButtonText: this.$t('OK') });\n        if (confirm) {\n          return this.getSubmitForm();\n        }\n        return false;\n      }\n      return this.getSubmitForm();\n    },\n    resetForm() {\n      this.$refs.form.resetFields();\n      this.form.consigneeId = null;\n      this.form.productCode = '';\n      this.form.productDescription = '';\n      this.$refs['form-product'].clearLocalModel();\n      this.$refs[formConsignee].clearLocalModel();\n      this.$refs['form-farm-name'].clearLocalModel();\n      this.form.shipDate = moment(this.orderEntry.actualFilters.shipDate, 'YYYY-MM-DD').toDate();\n      this.$nextTick(() => {\n        this.form.consigneeAccountId = this.orderEntry.actualFilters.consigneeAccountId;\n        this.$refs[formConsignee].setLocalModel(this.orderEntry.actualFilters.consigneeName);\n      });\n      this.$refs.form.$el[0].focus();\n    },\n    /* The datepicker has an issue when change manually, the focus is lost. */\n    handleChangeDate() {\n      this.$refs.form.$el[4].focus();\n    },\n    isVisible() {\n      return this.$can(this.permissions.DATA_ENTRY.ADD_SHIPMENT) || this.$can(this.permissions.DATA_ENTRY.ADD_SHIPMENT_AFTER_CUTOFF);\n    },\n    getSubmitForm() {\n      return new Promise((resolve, reject) => {\n        this.$refs.form.validate((valid) => {\n          if (valid) {\n            Message.closeAll();\n            const loading = this.$loading(constants.LOADING.DEFAULT_CONFIG);\n            this.$store\n              .dispatch('orderEntry/save', this.form)\n              .then((response) => {\n                loading.close();\n                this.$message.success(response.message);\n                this.resetForm();\n                this.$refs.form.$el[0].focus();\n                this.$store.dispatch('orderEntry/search', {});\n                resolve(response);\n              })\n              .catch((error) => {\n                loading.close();\n                reject(error);\n              });\n          } else {\n            reject(new Error(this.$t('common.invalid')));\n          }\n        });\n      });\n    }\n  }\n};\n</script>\n<style rel=\"stylesheet/scss\" lang=\"scss\">\ndiv#add-dialog-footer {\n  display: -webkit-flex;\n  -webkit-flex-direction: row-reverse;\n  display: flex;\n  flex-direction: row-reverse;\n}\n\nbutton#form-save-button {\n  margin-left: 10px;\n}\n</style>\n"]}]}