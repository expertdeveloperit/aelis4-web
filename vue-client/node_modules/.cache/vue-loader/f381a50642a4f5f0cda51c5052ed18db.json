{"remainingRequest":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/spineor/Downloads/aelis4-web/vue-client/src/views/warehouse/orderEntry/TableSummaryExtensions.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/spineor/Downloads/aelis4-web/vue-client/src/views/warehouse/orderEntry/TableSummaryExtensions.vue","mtime":1566984596000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from 'vuex';\nimport constants from '@/utils/constants';\nimport SubmitExtensionButton from '@/views/warehouse/orderEntry/components/extensions/SubmitExtensionButton';\n\nexport default {\n  name: 'TableSummary',\n  components: { SubmitExtensionButton },\n  computed: {\n    ...mapGetters([\n      'orderEntry',\n      'extensions'\n    ])\n  },\n  data() {\n    return {\n      sizes: constants.TABLES.DEFAULT_LIMIT_SIZES,\n      finalizedId: constants.ORDER_ENTRY.ORDER_STATUS[2].value,\n      extensionStatus: constants.ORDER_ENTRY.EXTENSION_STATUS,\n      extensionStatusRejected: constants.ORDER_ENTRY.EXTENSION_STATUS[2].index\n    };\n  },\n  methods: {\n    handleSearchChangePage(val) {\n      this.$store.dispatch('orderEntry/search', { page: val });\n    },\n    handleSearchChangeLimit(val) {\n      this.$store.dispatch('orderEntry/search', { rows: val, page: constants.TABLES.DEFAULT_PAGE });\n    },\n    handleSortChange(data) {\n      let { prop } = data;\n      const { order } = data;\n      prop = constants.TABLES.ORDER_ENTRY.COLUMNS_MAP_SORT[prop] || prop;\n      this.$store.dispatch('orderEntry/search', { orderField: prop, orderDirection: constants.TABLES.ORDER_DIRECTION[order] });\n    },\n    showCheckbox(status, numberUnits, numberUnitsReceived, lastExtensionStatus) {\n      // Only Show Checkbox when status is finalized, the consolidation has units pending to receive.\n      // And This one does not have an extension, or if you have the status rejected (This check will not appear if you have an extension pending or approved).\n      const isStatusFinalized = status === this.finalizedId;\n      const hasUnitsPendingToReceive = numberUnits > numberUnitsReceived;\n      const noExtensionOrExtensionRejected = (lastExtensionStatus === null || lastExtensionStatus === undefined) || lastExtensionStatus === this.extensionStatusRejected;\n      return isStatusFinalized && hasUnitsPendingToReceive && noExtensionOrExtensionRejected;\n    },\n    isCheckedExtension(consigneeAccountId, consolidationId) {\n      if (Object.prototype.hasOwnProperty.call(this.extensions.selectedByConsignee, consigneeAccountId)) {\n        const consolidationSelectedExists = this.extensions.selectedByConsignee[consigneeAccountId].consolidations.find(c => c.id === consolidationId);\n        if (consolidationSelectedExists && consolidationSelectedExists.total === consolidationSelectedExists.totalChecked) {\n          return true;\n        }\n        return false;\n      }\n      return false;\n    },\n    isIndeterminate(consigneeAccountId, consolidationId) {\n      if (Object.prototype.hasOwnProperty.call(this.extensions.selectedByConsignee, consigneeAccountId)) {\n        const consolidationSelectedExists = this.extensions.selectedByConsignee[consigneeAccountId].consolidations.find(c => c.id === consolidationId);\n        if (consolidationSelectedExists && consolidationSelectedExists.total !== consolidationSelectedExists.totalChecked) {\n          return true;\n        }\n        return false;\n      }\n      return false;\n    },\n    handleUpdateSelectedConsolidate(consolidation) {\n      const consolidationSelected = {\n        consigneeAccountId: consolidation.consigneeAccountId,\n        consigneeAccountName: consolidation.consigneeName,\n        consolidateId: consolidation.id,\n        consolidateTotal: consolidation.numberUnits - consolidation.numberUnitsReceived\n      };\n      this.$store.dispatch('extensions/updateSelectedConsolidate', consolidationSelected);\n    },\n    async cancelExtension() {\n      const confirmCancelExtension = await this.$confirm(this.$t('warehouse.orderEntry.extensions.confirmCancel'), { confirmButtonText: this.$t('common.yes') }).catch(() => {});\n      if (confirmCancelExtension) {\n        this.$store.dispatch('extensions/clearSelectedByConsignee');\n        this.$store.dispatch('orderEntry/setFilterShipDateDisabled', false);\n        this.$store.dispatch('orderEntry/setIsCreatingExtension', false);\n      }\n    }\n  },\n  mounted() {\n    this.$store.dispatch('orderEntry/setFilterShipDateDisabled', true);\n  }\n};\n",{"version":3,"sources":["TableSummaryExtensions.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsJA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TableSummaryExtensions.vue","sourceRoot":"src/views/warehouse/orderEntry","sourcesContent":["<template>\n    <div class=\"order-table-container order-extensions-container bg-white\">\n        <div class=\"default-section-header\">\n          <div class=\"default-section-title\"> {{ $t('warehouse.orderEntry.extensions.titleSummary') }} </div>\n          <div class=\"default-section-actions\">\n              <el-button type=\"default\" size=\"mini\" @click=\"cancelExtension()\"> {{ $t('common.cancel') }} </el-button>\n              <submit-extension-button />\n          </div>\n        </div>\n        <div class=\"order-table\">\n            <div class=\"height-100-p\">\n                <el-table\n                    :data=\"orderEntry.list\"\n                    v-loading=\"orderEntry.loadingSearch\"\n                    id=\"order-data-list\"\n                    size=\"mini\"\n                    tooltip-effect=\"dark\"\n                    sortable\n                    class=\"dark-blue-table\"\n                    :empty-text=\"$t('common.notAbleToFindRecords')\"\n                    @sort-change=\"handleSortChange\"\n                    stripe>\n                    <el-table-column\n                        prop=\"orderNumber\"\n                        sortable=\"custom\"\n                        :min-width=\"15\"\n                        align=\"center\"\n                        :label=\"$t('warehouse.orderEntry.orderNumberShort')\">\n                        <template slot-scope=\"scope\">\n                        <el-tooltip class=\"item\" effect=\"dark\" :content=\"scope.row.orderNumber\" placement=\"top\">\n                            <span> {{ scope.row.orderNumber }} </span>\n                        </el-tooltip>\n                        </template>\n                    </el-table-column>\n                    <el-table-column\n                        prop=\"consignee\"\n                        sortable=\"custom\"\n                        :min-width=\"30\"\n                        :label=\"$t('warehouse.orderEntry.consignee')\">\n                        <template slot-scope=\"scope\">\n                            <el-tooltip class=\"item\" effect=\"dark\" :content=\"`${scope.row.consigneeName} - ${ scope.row.consigneeAccount }`\" placement=\"top\">\n                            <span> {{ scope.row.consigneeName }} - {{ scope.row.consigneeAccount }}</span>\n                            </el-tooltip>\n                        </template>\n                    </el-table-column>\n                    <el-table-column\n                        :min-width=\"10\"\n                        prop=\"unitOfMeasureName\"\n                        :label=\"$t('warehouse.orderEntry.unitOfMeasureShort')\">\n                    </el-table-column>\n                    <el-table-column\n                        :min-width=\"8\"\n                        prop=\"numberUnits\"\n                        :label=\"$t('warehouse.orderEntry.numberOfUnitsShort')\">\n                    </el-table-column>\n                    <el-table-column\n                        :min-width=\"10\"\n                        prop=\"measure\"\n                        :label=\"$t('warehouse.orderEntry.measure')\">\n                    </el-table-column>\n                    <el-table-column\n                        prop=\"length\"\n                        :min-width=\"8\"\n                        :label=\"$t('warehouse.orderEntry.length')\">\n                    </el-table-column>\n                    <el-table-column\n                        prop=\"width\"\n                        :min-width=\"8\"\n                        :label=\"$t('warehouse.orderEntry.width')\">\n                    </el-table-column>\n                    <el-table-column\n                        prop=\"height\"\n                        :min-width=\"8\"\n                        :label=\"$t('warehouse.orderEntry.height')\">\n                    </el-table-column>\n                    <el-table-column\n                        :min-width=\"10\"\n                        prop=\"productCode\"\n                        :label=\"$t('warehouse.orderEntry.product')\">\n                    </el-table-column>\n                    <el-table-column\n                        prop=\"productDescription\"\n                        sortable=\"custom\"\n                        :min-width=\"23\"\n                        :label=\"$t('warehouse.orderEntry.productDescription')\">\n                        <template slot-scope=\"scope\">\n                            <el-tooltip class=\"item\" effect=\"dark\" :content=\"scope.row.productDescription\" placement=\"top\">\n                            <span> {{ scope.row.productDescription }} </span>\n                            </el-tooltip>\n                        </template>\n                    </el-table-column>\n                    <el-table-column\n                        :min-width=\"8\"\n                        prop=\"poNumber\"\n                        :label=\"$t('warehouse.orderEntry.poNumber')\">\n                        <template slot-scope=\"scope\">\n                            <el-tooltip class=\"item\" effect=\"dark\" :content=\"scope.row.poNumber\" placement=\"top\">\n                            <span> {{ scope.row.poNumber }} </span>\n                            </el-tooltip>\n                        </template>\n                    </el-table-column>\n                    <el-table-column\n                        :min-width=\"15\"\n                        prop=\"farmName\"\n                        :label=\"$t('warehouse.orderEntry.farmBroker')\">\n                        <template slot-scope=\"scope\">\n                            <el-tooltip class=\"item\" effect=\"dark\" :content=\"scope.row.farmName\" placement=\"top\">\n                            <span> {{ scope.row.farmName }} </span>\n                            </el-tooltip>\n                        </template>\n                    </el-table-column>\n                    <el-table-column\n                        align=\"center\"\n                        :min-width=\"9\"\n                        prop=\"status\"\n                        :label=\"$t('warehouse.orderEntry.finalized')\">\n                        <template slot-scope=\"scope\">\n                        <span class=\"icon-status-span\">\n                            <i v-if=\"scope.row.status === finalizedId\" class=\"el-icon-success green-success\"></i>\n                        </span>\n                        <span class=\"icon-status-span\">\n                          <el-tooltip v-if=\"scope.row.lastExtensionNumber\" class=\"item\" effect=\"dark\" :content=\"`${extensionStatus[scope.row.lastExtensionStatus].name} - ${scope.row.lastExtensionNumber}`\" placement=\"top-start\">\n                              <i class=\"far fa-clock\"  :class=\"extensionStatus[scope.row.lastExtensionStatus].colorCssClass\"></i>\n                          </el-tooltip>\n                        </span>\n                        </template>\n                    </el-table-column>\n                    <el-table-column  :min-width=\"15\" :label=\"$t('warehouse.orderEntry.extensions.requestExtension')\" align=\"center\" class-name=\"fixed-width\">\n                    <template slot-scope=\"scope\">\n                        <span v-if=\"showCheckbox(scope.row.status, scope.row.numberUnits, scope.row.numberUnitsReceived, scope.row.lastExtensionStatus)\">\n                            <el-checkbox :value=\"isCheckedExtension(scope.row.consigneeAccountId, scope.row.id)\" :indeterminate=\"isIndeterminate(scope.row.consigneeAccountId, scope.row.id)\" @change=\"handleUpdateSelectedConsolidate(scope.row)\" label=\"\" class=\"green-indeterminate-checkbox\"></el-checkbox>\n                        </span>\n                    </template>\n                    </el-table-column>\n                </el-table>\n                <el-pagination v-show=\"orderEntry.total > 0\"\n                @size-change=\"handleSearchChangeLimit\"\n                :page-sizes=\"sizes\"\n                :page-size=\"orderEntry.actualFilters.rows\"\n                :current-page.sync=\"orderEntry.actualFilters.page\"\n                @current-change=\"handleSearchChangePage\"\n                layout=\"total, sizes, prev, pager, next, jumper\"\n                :total=\"orderEntry.total\">\n                </el-pagination>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex';\nimport constants from '@/utils/constants';\nimport SubmitExtensionButton from '@/views/warehouse/orderEntry/components/extensions/SubmitExtensionButton';\n\nexport default {\n  name: 'TableSummary',\n  components: { SubmitExtensionButton },\n  computed: {\n    ...mapGetters([\n      'orderEntry',\n      'extensions'\n    ])\n  },\n  data() {\n    return {\n      sizes: constants.TABLES.DEFAULT_LIMIT_SIZES,\n      finalizedId: constants.ORDER_ENTRY.ORDER_STATUS[2].value,\n      extensionStatus: constants.ORDER_ENTRY.EXTENSION_STATUS,\n      extensionStatusRejected: constants.ORDER_ENTRY.EXTENSION_STATUS[2].index\n    };\n  },\n  methods: {\n    handleSearchChangePage(val) {\n      this.$store.dispatch('orderEntry/search', { page: val });\n    },\n    handleSearchChangeLimit(val) {\n      this.$store.dispatch('orderEntry/search', { rows: val, page: constants.TABLES.DEFAULT_PAGE });\n    },\n    handleSortChange(data) {\n      let { prop } = data;\n      const { order } = data;\n      prop = constants.TABLES.ORDER_ENTRY.COLUMNS_MAP_SORT[prop] || prop;\n      this.$store.dispatch('orderEntry/search', { orderField: prop, orderDirection: constants.TABLES.ORDER_DIRECTION[order] });\n    },\n    showCheckbox(status, numberUnits, numberUnitsReceived, lastExtensionStatus) {\n      // Only Show Checkbox when status is finalized, the consolidation has units pending to receive.\n      // And This one does not have an extension, or if you have the status rejected (This check will not appear if you have an extension pending or approved).\n      const isStatusFinalized = status === this.finalizedId;\n      const hasUnitsPendingToReceive = numberUnits > numberUnitsReceived;\n      const noExtensionOrExtensionRejected = (lastExtensionStatus === null || lastExtensionStatus === undefined) || lastExtensionStatus === this.extensionStatusRejected;\n      return isStatusFinalized && hasUnitsPendingToReceive && noExtensionOrExtensionRejected;\n    },\n    isCheckedExtension(consigneeAccountId, consolidationId) {\n      if (Object.prototype.hasOwnProperty.call(this.extensions.selectedByConsignee, consigneeAccountId)) {\n        const consolidationSelectedExists = this.extensions.selectedByConsignee[consigneeAccountId].consolidations.find(c => c.id === consolidationId);\n        if (consolidationSelectedExists && consolidationSelectedExists.total === consolidationSelectedExists.totalChecked) {\n          return true;\n        }\n        return false;\n      }\n      return false;\n    },\n    isIndeterminate(consigneeAccountId, consolidationId) {\n      if (Object.prototype.hasOwnProperty.call(this.extensions.selectedByConsignee, consigneeAccountId)) {\n        const consolidationSelectedExists = this.extensions.selectedByConsignee[consigneeAccountId].consolidations.find(c => c.id === consolidationId);\n        if (consolidationSelectedExists && consolidationSelectedExists.total !== consolidationSelectedExists.totalChecked) {\n          return true;\n        }\n        return false;\n      }\n      return false;\n    },\n    handleUpdateSelectedConsolidate(consolidation) {\n      const consolidationSelected = {\n        consigneeAccountId: consolidation.consigneeAccountId,\n        consigneeAccountName: consolidation.consigneeName,\n        consolidateId: consolidation.id,\n        consolidateTotal: consolidation.numberUnits - consolidation.numberUnitsReceived\n      };\n      this.$store.dispatch('extensions/updateSelectedConsolidate', consolidationSelected);\n    },\n    async cancelExtension() {\n      const confirmCancelExtension = await this.$confirm(this.$t('warehouse.orderEntry.extensions.confirmCancel'), { confirmButtonText: this.$t('common.yes') }).catch(() => {});\n      if (confirmCancelExtension) {\n        this.$store.dispatch('extensions/clearSelectedByConsignee');\n        this.$store.dispatch('orderEntry/setFilterShipDateDisabled', false);\n        this.$store.dispatch('orderEntry/setIsCreatingExtension', false);\n      }\n    }\n  },\n  mounted() {\n    this.$store.dispatch('orderEntry/setFilterShipDateDisabled', true);\n  }\n};\n</script>\n\n<style rel=\"stylesheet/scss\" lang=\"scss\">\n.order-extensions-container {\n    box-shadow: 0px 0px 7px 4px #dfdede;\n    .icon-details-extensions {\n      margin-left: 10px;\n      i {\n        font-size: 15px !important;\n      }\n    }\n}\n\n</style>\n"]}]}