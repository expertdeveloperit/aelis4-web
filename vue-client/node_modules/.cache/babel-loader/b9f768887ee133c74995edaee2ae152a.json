{"remainingRequest":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/thread-loader/dist/cjs.js!/home/spineor/Downloads/aelis4-web/vue-client/node_modules/babel-loader/lib/index.js!/home/spineor/Downloads/aelis4-web/vue-client/node_modules/eslint-loader/index.js??ref--13-0!/home/spineor/Downloads/aelis4-web/vue-client/src/store/modules/warehouse/extensions.js","dependencies":[{"path":"/home/spineor/Downloads/aelis4-web/vue-client/src/store/modules/warehouse/extensions.js","mtime":1566984596000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.array.find\";\nimport _defineProperty from \"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Loading, Message } from 'element-ui';\nimport extensionApiService from '@/api/extensionService';\nimport constants from '@/utils/constants';\n\nvar newConsolidation = function newConsolidation(consolidationSelected) {\n  return {\n    id: consolidationSelected.consolidateId,\n    total: consolidationSelected.consolidateTotal,\n    totalChecked: consolidationSelected.consolidateTotal,\n    allDetailsCheckedInitially: true,\n    // This fields indicates that the detail search must be returns all ids to add into units array below.\n    units: []\n  };\n};\n\nvar newUnitConsolidation = function newUnitConsolidation(unitConsolidationSelected) {\n  return {\n    id: unitConsolidationSelected.consolidateId,\n    total: unitConsolidationSelected.consolidateTotal,\n    totalChecked: 1,\n    allDetailsCheckedInitially: false,\n    units: [unitConsolidationSelected.unitId]\n  };\n};\n\nvar extensions = {\n  namespaced: true,\n  state: {\n    /* selectedByConsignee E.g.:\n    {\n        '${consigneeAccountId}':  {\n            consigneeAccountName: 'ARMELLINI PALM CITY DOCK - M200044',\n            totalUnits: 423,\n            consolidations: [\n            { id: 1888727829, total: 10, totalChecked: 10, units: [] },\n            { id: 1888727830, total: 413, totalChecked: 413, units: [] },\n            ]\n        },\n    }\n    */\n    selectedByConsignee: {}\n  },\n  mutations: {\n    UPDATE_SELECTED_BY_CONSIGNEE: function UPDATE_SELECTED_BY_CONSIGNEE(state, selectedByConsignee) {\n      state.selectedByConsignee = selectedByConsignee;\n    },\n    CLEAR_SELECTED_BY_CONSIGNEE: function CLEAR_SELECTED_BY_CONSIGNEE(state) {\n      state.selectedByConsignee = {};\n    }\n  },\n  actions: {\n    /**\n    Action to update consolidate selected from extensions summary, check(Add to consolidations array)\n    and uncheck(Remove from consolidations array).\n    The consolidationSelected must be have the following attributes.\n     E.g.:\n        consolidationSelected : {\n            consigneeAccountId,\n            consigneeAccountName,\n            consolidateId,\n            consolidateTotal\n        }\n    * */\n    updateSelectedConsolidate: function updateSelectedConsolidate(_ref, consolidationSelected) {\n      var commit = _ref.commit,\n          state = _ref.state;\n\n      var selectedByConsignee = _objectSpread({}, state.selectedByConsignee); // 1. If the consignee object exists then we update the consolidation list.\n\n\n      if (Object.prototype.hasOwnProperty.call(selectedByConsignee, consolidationSelected.consigneeAccountId)) {\n        var consolidationSelectedExists = selectedByConsignee[consolidationSelected.consigneeAccountId].consolidations.find(function (c) {\n          return c.id === consolidationSelected.consolidateId;\n        }); // 1.1 If consolidation exists then we must delete the consolidate and decrease totals.\n\n        if (consolidationSelectedExists) {\n          selectedByConsignee[consolidationSelected.consigneeAccountId].totalUnits = Math.max(0, selectedByConsignee[consolidationSelected.consigneeAccountId].totalUnits - consolidationSelectedExists.totalChecked);\n          selectedByConsignee[consolidationSelected.consigneeAccountId].consolidations = selectedByConsignee[consolidationSelected.consigneeAccountId].consolidations.filter(function (c) {\n            return c.id !== consolidationSelected.consolidateId;\n          });\n\n          if (selectedByConsignee[consolidationSelected.consigneeAccountId].consolidations.length === 0) {\n            delete selectedByConsignee[consolidationSelected.consigneeAccountId];\n          }\n        } else {\n          // 1.2 If consolidation does not exists then we must add the consolidate and increase totals.\n          selectedByConsignee[consolidationSelected.consigneeAccountId].totalUnits += consolidationSelected.consolidateTotal;\n          selectedByConsignee[consolidationSelected.consigneeAccountId].consolidations.push(newConsolidation(consolidationSelected));\n        }\n      } else {\n        // 2. If the consignee object does not exists then we  create the consignee object and add the consolidate\n        selectedByConsignee[consolidationSelected.consigneeAccountId] = {\n          consigneeAccountName: consolidationSelected.consigneeAccountName,\n          totalUnits: consolidationSelected.consolidateTotal,\n          consolidations: [newConsolidation(consolidationSelected)]\n        };\n      }\n\n      commit('UPDATE_SELECTED_BY_CONSIGNEE', selectedByConsignee);\n    },\n\n    /**\n    Action to update units from consolidation when  detail is loaded and the flag allDetailsCheckedInitially is true.\n    The unitsInfo must be have the following attributes.\n     E.g.:\n        unitsInfo : {\n          consigneeAccountId,\n          consolidateId,\n          unitIds\n        }\n    * */\n    updateUnitsAfterLoadDetail: function updateUnitsAfterLoadDetail(_ref2, unitsInfo) {\n      var commit = _ref2.commit,\n          state = _ref2.state;\n\n      var selectedByConsignee = _objectSpread({}, state.selectedByConsignee); // 1. If the consignee object exists then we update the consolidation list.\n\n\n      if (Object.prototype.hasOwnProperty.call(selectedByConsignee, unitsInfo.consigneeAccountId)) {\n        var consolidationSelectedExists = selectedByConsignee[unitsInfo.consigneeAccountId].consolidations.find(function (c) {\n          return c.id === unitsInfo.consolidateId;\n        }); // 2. If consolidation exists then we must update units without modify totals.\n\n        if (consolidationSelectedExists) {\n          consolidationSelectedExists.units = unitsInfo.unitIds; // Update flag To control the load only first time.\n\n          consolidationSelectedExists.allDetailsCheckedInitially = false;\n          commit('UPDATE_SELECTED_BY_CONSIGNEE', selectedByConsignee);\n        }\n      }\n    },\n\n    /**\n    Action to update consolidate selected from extensions detail, check(Add to units array)\n    and uncheck(Remove from units array).\n    The consolidationSelected must be have the following attributes.\n     E.g.:\n        unitConsolidationSelected : {\n            consigneeAccountId,\n            consigneeAccountName,\n            consolidateId,\n            consolidateTotal,\n            unitId\n        }\n    * */\n    updateSelecteUnit: function updateSelecteUnit(_ref3, unitConsolidationSelected) {\n      var commit = _ref3.commit,\n          state = _ref3.state;\n\n      var selectedByConsignee = _objectSpread({}, state.selectedByConsignee); // 1. If the consignee object exists then we update the consolidation list.\n\n\n      if (Object.prototype.hasOwnProperty.call(selectedByConsignee, unitConsolidationSelected.consigneeAccountId)) {\n        var consolidationSelectedExists = selectedByConsignee[unitConsolidationSelected.consigneeAccountId].consolidations.find(function (c) {\n          return c.id === unitConsolidationSelected.consolidateId;\n        });\n\n        if (consolidationSelectedExists) {\n          var unitIdExitsIndex = consolidationSelectedExists.units.indexOf(unitConsolidationSelected.unitId); // 1.1.1 If does not exist unit Id, then we add them.\n\n          if (unitIdExitsIndex < 0) {\n            selectedByConsignee[unitConsolidationSelected.consigneeAccountId].totalUnits += 1;\n            consolidationSelectedExists.totalChecked += 1;\n            consolidationSelectedExists.units.push(unitConsolidationSelected.unitId);\n          } else {\n            // 1.1.2 If exists unit Id, then we remove them.\n            selectedByConsignee[unitConsolidationSelected.consigneeAccountId].totalUnits -= 1;\n            consolidationSelectedExists.totalChecked -= 1;\n            consolidationSelectedExists.units.splice(unitIdExitsIndex, 1); // 1.1.3 If totalchecked is zero, then also remove consolidationSelected.\n\n            if (consolidationSelectedExists.totalChecked <= 0) {\n              selectedByConsignee[unitConsolidationSelected.consigneeAccountId].consolidations = selectedByConsignee[unitConsolidationSelected.consigneeAccountId].consolidations.filter(function (c) {\n                return c.id !== unitConsolidationSelected.consolidateId;\n              });\n            }\n          }\n        } else {\n          // 1.2 If consolidation does not exists then we must add the consolidate and increase totals.\n          selectedByConsignee[unitConsolidationSelected.consigneeAccountId].totalUnits += 1;\n          selectedByConsignee[unitConsolidationSelected.consigneeAccountId].consolidations.push(newUnitConsolidation(unitConsolidationSelected));\n        }\n      } else {\n        // 2. If the consignee object does not exists then we  create the consignee object and add the consolidate\n        selectedByConsignee[unitConsolidationSelected.consigneeAccountId] = {\n          consigneeAccountName: unitConsolidationSelected.consigneeAccountName,\n          totalUnits: 1,\n          consolidations: [newUnitConsolidation(unitConsolidationSelected)]\n        };\n      }\n\n      commit('UPDATE_SELECTED_BY_CONSIGNEE', selectedByConsignee);\n    },\n    submit: function () {\n      var _submit = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(_ref4, extensionHeader) {\n        var commit, state, extensionToSave, consigneeAccountId, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, consolidation, loading, response;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref4.commit, state = _ref4.state;\n                extensionToSave = Object.assign({}, extensionHeader);\n                extensionToSave.consolidateList = [];\n                _context.t0 = regeneratorRuntime.keys(state.selectedByConsignee);\n\n              case 4:\n                if ((_context.t1 = _context.t0()).done) {\n                  _context.next = 28;\n                  break;\n                }\n\n                consigneeAccountId = _context.t1.value;\n\n                if (!Object.prototype.hasOwnProperty.call(state.selectedByConsignee, consigneeAccountId)) {\n                  _context.next = 26;\n                  break;\n                }\n\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context.prev = 10;\n\n                for (_iterator = state.selectedByConsignee[consigneeAccountId].consolidations[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  consolidation = _step.value;\n                  extensionToSave.consolidateList.push(consolidation);\n                }\n\n                _context.next = 18;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t2 = _context[\"catch\"](10);\n                _didIteratorError = true;\n                _iteratorError = _context.t2;\n\n              case 18:\n                _context.prev = 18;\n                _context.prev = 19;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 21:\n                _context.prev = 21;\n\n                if (!_didIteratorError) {\n                  _context.next = 24;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 24:\n                return _context.finish(21);\n\n              case 25:\n                return _context.finish(18);\n\n              case 26:\n                _context.next = 4;\n                break;\n\n              case 28:\n                Message.closeAll();\n                loading = Loading.service(constants.LOADING.DEFAULT_CONFIG);\n                _context.next = 32;\n                return extensionApiService.submit(extensionToSave);\n\n              case 32:\n                response = _context.sent;\n                commit('CLEAR_SELECTED_BY_CONSIGNEE');\n                loading.close();\n                return _context.abrupt(\"return\", response);\n\n              case 36:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[10, 14, 18, 26], [19,, 21, 25]]);\n      }));\n\n      function submit(_x, _x2) {\n        return _submit.apply(this, arguments);\n      }\n\n      return submit;\n    }(),\n    clearSelectedByConsignee: function clearSelectedByConsignee(_ref5) {\n      var commit = _ref5.commit;\n      commit('CLEAR_SELECTED_BY_CONSIGNEE');\n    }\n  }\n};\nexport default extensions;",{"version":3,"sources":["/home/spineor/Downloads/aelis4-web/vue-client/src/store/modules/warehouse/extensions.js"],"names":["Loading","Message","extensionApiService","constants","newConsolidation","consolidationSelected","id","consolidateId","total","consolidateTotal","totalChecked","allDetailsCheckedInitially","units","newUnitConsolidation","unitConsolidationSelected","unitId","extensions","namespaced","state","selectedByConsignee","mutations","UPDATE_SELECTED_BY_CONSIGNEE","CLEAR_SELECTED_BY_CONSIGNEE","actions","updateSelectedConsolidate","commit","Object","prototype","hasOwnProperty","call","consigneeAccountId","consolidationSelectedExists","consolidations","find","c","totalUnits","Math","max","filter","length","push","consigneeAccountName","updateUnitsAfterLoadDetail","unitsInfo","unitIds","updateSelecteUnit","unitIdExitsIndex","indexOf","splice","submit","extensionHeader","extensionToSave","assign","consolidateList","consolidation","closeAll","loading","service","LOADING","DEFAULT_CONFIG","response","close","clearSelectedByConsignee"],"mappings":"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","sourcesContent":["import { Loading, Message } from 'element-ui';\nimport extensionApiService from '@/api/extensionService';\nimport constants from '@/utils/constants';\n\n\nconst newConsolidation = consolidationSelected => ({\n  id: consolidationSelected.consolidateId,\n  total: consolidationSelected.consolidateTotal,\n  totalChecked: consolidationSelected.consolidateTotal,\n  allDetailsCheckedInitially: true, // This fields indicates that the detail search must be returns all ids to add into units array below.\n  units: []\n});\nconst newUnitConsolidation = unitConsolidationSelected => ({\n  id: unitConsolidationSelected.consolidateId,\n  total: unitConsolidationSelected.consolidateTotal,\n  totalChecked: 1,\n  allDetailsCheckedInitially: false,\n  units: [unitConsolidationSelected.unitId]\n});\n\nconst extensions = {\n  namespaced: true,\n  state: {\n    /* selectedByConsignee E.g.:\n    {\n        '${consigneeAccountId}':  {\n            consigneeAccountName: 'ARMELLINI PALM CITY DOCK - M200044',\n            totalUnits: 423,\n            consolidations: [\n            { id: 1888727829, total: 10, totalChecked: 10, units: [] },\n            { id: 1888727830, total: 413, totalChecked: 413, units: [] },\n            ]\n        },\n    }\n    */\n    selectedByConsignee: {}\n  },\n  mutations: {\n    UPDATE_SELECTED_BY_CONSIGNEE: (state, selectedByConsignee) => {\n      state.selectedByConsignee = selectedByConsignee;\n    },\n    CLEAR_SELECTED_BY_CONSIGNEE: (state) => {\n      state.selectedByConsignee = {};\n    }\n  },\n  actions: {\n    /**\n    Action to update consolidate selected from extensions summary, check(Add to consolidations array)\n    and uncheck(Remove from consolidations array).\n    The consolidationSelected must be have the following attributes.\n     E.g.:\n        consolidationSelected : {\n            consigneeAccountId,\n            consigneeAccountName,\n            consolidateId,\n            consolidateTotal\n        }\n    * */\n    updateSelectedConsolidate({ commit, state }, consolidationSelected) {\n      const selectedByConsignee = { ...state.selectedByConsignee };\n\n      // 1. If the consignee object exists then we update the consolidation list.\n      if (Object.prototype.hasOwnProperty.call(selectedByConsignee, consolidationSelected.consigneeAccountId)) {\n        const consolidationSelectedExists = selectedByConsignee[consolidationSelected.consigneeAccountId].consolidations.find(c => c.id === consolidationSelected.consolidateId);\n\n        // 1.1 If consolidation exists then we must delete the consolidate and decrease totals.\n        if (consolidationSelectedExists) {\n          selectedByConsignee[consolidationSelected.consigneeAccountId].totalUnits = Math.max(0, selectedByConsignee[consolidationSelected.consigneeAccountId].totalUnits - consolidationSelectedExists.totalChecked);\n          selectedByConsignee[consolidationSelected.consigneeAccountId].consolidations = selectedByConsignee[consolidationSelected.consigneeAccountId].consolidations.filter(c => c.id !== consolidationSelected.consolidateId);\n          if (selectedByConsignee[consolidationSelected.consigneeAccountId].consolidations.length === 0) {\n            delete selectedByConsignee[consolidationSelected.consigneeAccountId];\n          }\n        } else {\n        // 1.2 If consolidation does not exists then we must add the consolidate and increase totals.\n          selectedByConsignee[consolidationSelected.consigneeAccountId].totalUnits += consolidationSelected.consolidateTotal;\n          selectedByConsignee[consolidationSelected.consigneeAccountId].consolidations.push(newConsolidation(consolidationSelected));\n        }\n      } else {\n      // 2. If the consignee object does not exists then we  create the consignee object and add the consolidate\n        selectedByConsignee[consolidationSelected.consigneeAccountId] = {\n          consigneeAccountName: consolidationSelected.consigneeAccountName,\n          totalUnits: consolidationSelected.consolidateTotal,\n          consolidations: [\n            newConsolidation(consolidationSelected)\n          ]\n        };\n      }\n      commit('UPDATE_SELECTED_BY_CONSIGNEE', selectedByConsignee);\n    },\n    /**\n    Action to update units from consolidation when  detail is loaded and the flag allDetailsCheckedInitially is true.\n    The unitsInfo must be have the following attributes.\n     E.g.:\n        unitsInfo : {\n          consigneeAccountId,\n          consolidateId,\n          unitIds\n        }\n    * */\n    updateUnitsAfterLoadDetail({ commit, state }, unitsInfo) {\n      const selectedByConsignee = { ...state.selectedByConsignee };\n\n      // 1. If the consignee object exists then we update the consolidation list.\n      if (Object.prototype.hasOwnProperty.call(selectedByConsignee, unitsInfo.consigneeAccountId)) {\n        const consolidationSelectedExists = selectedByConsignee[unitsInfo.consigneeAccountId].consolidations.find(c => c.id === unitsInfo.consolidateId);\n\n        // 2. If consolidation exists then we must update units without modify totals.\n        if (consolidationSelectedExists) {\n          consolidationSelectedExists.units = unitsInfo.unitIds;\n          // Update flag To control the load only first time.\n          consolidationSelectedExists.allDetailsCheckedInitially = false;\n          commit('UPDATE_SELECTED_BY_CONSIGNEE', selectedByConsignee);\n        }\n      }\n    },\n    /**\n    Action to update consolidate selected from extensions detail, check(Add to units array)\n    and uncheck(Remove from units array).\n    The consolidationSelected must be have the following attributes.\n     E.g.:\n        unitConsolidationSelected : {\n            consigneeAccountId,\n            consigneeAccountName,\n            consolidateId,\n            consolidateTotal,\n            unitId\n        }\n    * */\n    updateSelecteUnit({ commit, state }, unitConsolidationSelected) {\n      const selectedByConsignee = { ...state.selectedByConsignee };\n\n      // 1. If the consignee object exists then we update the consolidation list.\n      if (Object.prototype.hasOwnProperty.call(selectedByConsignee, unitConsolidationSelected.consigneeAccountId)) {\n        const consolidationSelectedExists = selectedByConsignee[unitConsolidationSelected.consigneeAccountId].consolidations.find(c => c.id === unitConsolidationSelected.consolidateId);\n\n        if (consolidationSelectedExists) {\n          const unitIdExitsIndex = consolidationSelectedExists.units.indexOf(unitConsolidationSelected.unitId);\n          // 1.1.1 If does not exist unit Id, then we add them.\n          if (unitIdExitsIndex < 0) {\n            selectedByConsignee[unitConsolidationSelected.consigneeAccountId].totalUnits += 1;\n            consolidationSelectedExists.totalChecked += 1;\n            consolidationSelectedExists.units.push(unitConsolidationSelected.unitId);\n          } else {\n            // 1.1.2 If exists unit Id, then we remove them.\n            selectedByConsignee[unitConsolidationSelected.consigneeAccountId].totalUnits -= 1;\n            consolidationSelectedExists.totalChecked -= 1;\n            consolidationSelectedExists.units.splice(unitIdExitsIndex, 1);\n\n            // 1.1.3 If totalchecked is zero, then also remove consolidationSelected.\n            if (consolidationSelectedExists.totalChecked <= 0) {\n              selectedByConsignee[unitConsolidationSelected.consigneeAccountId].consolidations = selectedByConsignee[unitConsolidationSelected.consigneeAccountId].consolidations.filter(c => c.id !== unitConsolidationSelected.consolidateId);\n            }\n          }\n        } else {\n        // 1.2 If consolidation does not exists then we must add the consolidate and increase totals.\n          selectedByConsignee[unitConsolidationSelected.consigneeAccountId].totalUnits += 1;\n          selectedByConsignee[unitConsolidationSelected.consigneeAccountId].consolidations.push(newUnitConsolidation(unitConsolidationSelected));\n        }\n      } else {\n      // 2. If the consignee object does not exists then we  create the consignee object and add the consolidate\n        selectedByConsignee[unitConsolidationSelected.consigneeAccountId] = {\n          consigneeAccountName: unitConsolidationSelected.consigneeAccountName,\n          totalUnits: 1,\n          consolidations: [\n            newUnitConsolidation(unitConsolidationSelected)\n          ]\n        };\n      }\n      commit('UPDATE_SELECTED_BY_CONSIGNEE', selectedByConsignee);\n    },\n    async submit({ commit, state }, extensionHeader) {\n      const extensionToSave = Object.assign({}, extensionHeader);\n      extensionToSave.consolidateList = [];\n      for (const consigneeAccountId in state.selectedByConsignee) {\n        if (Object.prototype.hasOwnProperty.call(state.selectedByConsignee, consigneeAccountId)) {\n          for (const consolidation of state.selectedByConsignee[consigneeAccountId].consolidations) {\n            extensionToSave.consolidateList.push(consolidation);\n          }\n        }\n      }\n      Message.closeAll();\n      const loading = Loading.service(constants.LOADING.DEFAULT_CONFIG);\n      const response = await extensionApiService.submit(extensionToSave);\n      commit('CLEAR_SELECTED_BY_CONSIGNEE');\n      loading.close();\n      return response;\n    },\n    clearSelectedByConsignee({ commit }) {\n      commit('CLEAR_SELECTED_BY_CONSIGNEE');\n    }\n  }\n};\n\nexport default extensions;\n"]}]}