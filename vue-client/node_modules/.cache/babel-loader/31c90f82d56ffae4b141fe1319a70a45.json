{"remainingRequest":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/babel-loader/lib/index.js!/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/spineor/Downloads/aelis4-web/vue-client/src/components/Autocomplete/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/spineor/Downloads/aelis4-web/vue-client/src/components/Autocomplete/index.vue","mtime":1562577473000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport constants from '@/utils/constants';\nimport autocompleteApiService from '@/api/autocompleteService';\nexport default {\n  name: 'Autocomplete',\n  data: function data() {\n    return {\n      localModel: null\n    };\n  },\n  props: {\n    /* The model of parent that must be updated when user select option. */\n    model: {\n      default: null\n    },\n\n    /* Additional model of parent that must be updated when user select option with other value of item selected. */\n    modelAdditional: {\n      default: null\n    },\n\n    /* End Point Url to search data. */\n    url: {\n      type: String,\n      default: null\n    },\n\n    /* Current ShipperAccountId. */\n    shipperAccountId: {\n      type: Number,\n      default: null\n    },\n    maxlength: {\n      type: Number,\n      default: 100\n    },\n\n    /* If the autocomplete item must be selected to change the parent model. */\n    strict: {\n      type: Boolean,\n      default: true\n    },\n\n    /* The attribute name of item that must be show in the options of autocomplete. */\n    labelField: {\n      type: String,\n      default: null\n    },\n\n    /* The attribute name of item that must be show in the options of autocomplete concatenated with dash after labelField. */\n    labelFieldLastWithDash: {\n      type: String,\n      default: null\n    },\n\n    /* Optional: If the value that we need to show is diferent to labelField. */\n    labelfieldSelected: {\n      type: String,\n      default: null\n    },\n\n    /* The attribute name of item that must be updated the model. */\n    valueField: {\n      type: String,\n      default: null\n    },\n\n    /* The attribute name of item that must be updated the modelAdditional. */\n    valueFieldAdditional: {\n      type: String,\n      default: null\n    },\n    styles: {\n      type: String,\n      default: null\n    },\n    classCss: {\n      type: String,\n      default: null\n    },\n\n    /* The function of parent that must be executed on key enter. */\n    enterKeyAction: {\n      type: Function,\n      default: null\n    },\n\n    /* The function of parent that must be executed on select. */\n    selectAction: {\n      type: Function,\n      default: null\n    },\n\n    /* The function of parent that must be executed on clear. */\n    clearAction: {\n      type: Function,\n      default: null\n    },\n\n    /* Attribute that indicates if the popper must be append to body. */\n    popperAppendToBody: {\n      type: Boolean,\n      default: false\n    },\n    placeholder: {\n      type: String,\n      default: ''\n    }\n  },\n  watch: {\n    localModel: function localModel() {\n      // If strict is false then it must be update the parent model.\n      if (!this.strict) {\n        this.$emit('update:model', this.localModel);\n      }\n    }\n  },\n  methods: {\n    querySearchAsync: function querySearchAsync(queryString, cb) {\n      var _this = this;\n\n      if (queryString && queryString.length >= 2 && queryString.trim()) {\n        return autocompleteApiService.getList(this.url, queryString.trim(), this.shipperAccountId).then(function (response) {\n          if (response && response.data && response.data.length > 0) {\n            response.data.forEach(function (element) {\n              // The value field its necessary by native component to show in the input.\n              element.value = element[_this.labelField];\n              element.value += element[_this.labelFieldLastWithDash] ? \" - \".concat(element[_this.labelFieldLastWithDash]) : '';\n            });\n            cb(response.data);\n          } else {\n            cb([]);\n          }\n        });\n      }\n\n      return false;\n    },\n    handleSelect: function handleSelect(item) {\n      this.$emit('update:model', item[this.valueField]);\n\n      if (this.labelfieldSelected) {\n        this.localModel = item[this.labelfieldSelected];\n      }\n\n      if (this.valueFieldAdditional) {\n        this.$emit('update:modelAdditional', item[this.valueFieldAdditional]);\n      } // Excecute parent select action.\n\n\n      if (this.selectAction) {\n        this.selectAction(item);\n      }\n    },\n    clearAll: function clearAll() {\n      this.$emit('update:model', null); // Excecute parent clearAction action.\n\n      if (this.clearAction) {\n        this.clearAction();\n      }\n    },\n    clearParentModel: function clearParentModel(event) {\n      // tab, enter, end, home, left, right\n      var isControlKey = constants.KEY_CODE.CONTROL_KEYS_NO_BACKSPACE.find(function (key) {\n        return key === event.keyCode;\n      });\n\n      if (!isControlKey && this.model && this.strict) {\n        this.$emit('update:model', null);\n      }\n\n      if (constants.KEY_CODE.ENTER === event.keyCode && this.enterKeyAction) {\n        this.enterKeyAction();\n      }\n    },\n    clearLocalModel: function clearLocalModel() {\n      this.localModel = null;\n    },\n    setLocalModel: function setLocalModel(val) {\n      this.localModel = val;\n    },\n    getLocalModel: function getLocalModel() {\n      return this.localModel;\n    }\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <span>\n    <el-autocomplete\n        @clear=\"clearAll\"\n        @keyup.native=\"clearParentModel\"\n        v-alphanumeric-validation\n        v-model=\"localModel\"\n        clearable\n        size=\"mini\"\n        :placeholder=\"placeholder\"\n        :fetch-suggestions=\"querySearchAsync\"\n        :highlight-first-item=\"true\"\n        @select=\"handleSelect\"\n        :trigger-on-focus=\"false\"\n        :style=\"styles\"\n        :class=\"classCss || 'width-100p'\"\n        :maxlength=\"maxlength\"\n        :popper-append-to-body=\"popperAppendToBody\"\n        popper-class=\"autocomplete-popper\"\n        >\n    </el-autocomplete>\n  </span>\n</template>\n\n<script>\nimport constants from '@/utils/constants';\nimport autocompleteApiService from '@/api/autocompleteService';\n\nexport default {\n  name: 'Autocomplete',\n  data() {\n    return {\n      localModel: null\n    };\n  },\n  props: {\n    /* The model of parent that must be updated when user select option. */\n    model: {\n      default: null\n    },\n    /* Additional model of parent that must be updated when user select option with other value of item selected. */\n    modelAdditional: {\n      default: null\n    },\n    /* End Point Url to search data. */\n    url: {\n      type: String,\n      default: null\n    },\n    /* Current ShipperAccountId. */\n    shipperAccountId: {\n      type: Number,\n      default: null\n    },\n    maxlength: {\n      type: Number,\n      default: 100\n    },\n    /* If the autocomplete item must be selected to change the parent model. */\n    strict: {\n      type: Boolean,\n      default: true\n    },\n    /* The attribute name of item that must be show in the options of autocomplete. */\n    labelField: {\n      type: String,\n      default: null\n    },\n    /* The attribute name of item that must be show in the options of autocomplete concatenated with dash after labelField. */\n    labelFieldLastWithDash: {\n      type: String,\n      default: null\n    },\n    /* Optional: If the value that we need to show is diferent to labelField. */\n    labelfieldSelected: {\n      type: String,\n      default: null\n    },\n    /* The attribute name of item that must be updated the model. */\n    valueField: {\n      type: String,\n      default: null\n    },\n    /* The attribute name of item that must be updated the modelAdditional. */\n    valueFieldAdditional: {\n      type: String,\n      default: null\n    },\n    styles: {\n      type: String,\n      default: null\n    },\n    classCss: {\n      type: String,\n      default: null\n    },\n    /* The function of parent that must be executed on key enter. */\n    enterKeyAction: {\n      type: Function,\n      default: null\n    },\n    /* The function of parent that must be executed on select. */\n    selectAction: {\n      type: Function,\n      default: null\n    },\n    /* The function of parent that must be executed on clear. */\n    clearAction: {\n      type: Function,\n      default: null\n    },\n    /* Attribute that indicates if the popper must be append to body. */\n    popperAppendToBody: {\n      type: Boolean,\n      default: false\n    },\n    placeholder: {\n      type: String,\n      default: ''\n    }\n  },\n  watch: {\n    localModel() {\n      // If strict is false then it must be update the parent model.\n      if (!this.strict) {\n        this.$emit('update:model', this.localModel);\n      }\n    }\n  },\n  methods: {\n    querySearchAsync(queryString, cb) {\n      if (queryString && queryString.length >= 2 && queryString.trim()) {\n        return autocompleteApiService.getList(this.url, queryString.trim(), this.shipperAccountId).then((response) => {\n          if (response && response.data && response.data.length > 0) {\n            response.data.forEach((element) => {\n              // The value field its necessary by native component to show in the input.\n              element.value = element[this.labelField];\n              element.value += element[this.labelFieldLastWithDash] ? (` - ${element[this.labelFieldLastWithDash]}`) : '';\n            });\n            cb(response.data);\n          } else {\n            cb([]);\n          }\n        });\n      }\n      return false;\n    },\n    handleSelect(item) {\n      this.$emit('update:model', item[this.valueField]);\n      if (this.labelfieldSelected) {\n        this.localModel = item[this.labelfieldSelected];\n      }\n      if (this.valueFieldAdditional) {\n        this.$emit('update:modelAdditional', item[this.valueFieldAdditional]);\n      }\n\n      // Excecute parent select action.\n      if (this.selectAction) {\n        this.selectAction(item);\n      }\n    },\n    clearAll() {\n      this.$emit('update:model', null);\n      // Excecute parent clearAction action.\n      if (this.clearAction) {\n        this.clearAction();\n      }\n    },\n    clearParentModel(event) {\n      // tab, enter, end, home, left, right\n      const isControlKey = constants.KEY_CODE.CONTROL_KEYS_NO_BACKSPACE.find(key => key === event.keyCode);\n\n      if (!isControlKey && this.model && this.strict) {\n        this.$emit('update:model', null);\n      }\n\n      if (constants.KEY_CODE.ENTER === event.keyCode && this.enterKeyAction) {\n        this.enterKeyAction();\n      }\n    },\n    clearLocalModel() {\n      this.localModel = null;\n    },\n    setLocalModel(val) {\n      this.localModel = val;\n    },\n    getLocalModel() {\n      return this.localModel;\n    }\n  }\n};\n</script>\n<style rel=\"stylesheet/scss\" lang=\"scss\">\n.autocomplete-popper {\n    min-width: 30%;\n}\n</style>\n"],"sourceRoot":"src/components/Autocomplete"}]}