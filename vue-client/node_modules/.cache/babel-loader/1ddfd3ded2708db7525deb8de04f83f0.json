{"remainingRequest":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/thread-loader/dist/cjs.js!/home/spineor/Downloads/aelis4-web/vue-client/node_modules/babel-loader/lib/index.js!/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/spineor/Downloads/aelis4-web/vue-client/src/views/warehouse/orderEntry/components/ChangeShipDateButton.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/spineor/Downloads/aelis4-web/vue-client/src/views/warehouse/orderEntry/components/ChangeShipDateButton.vue","mtime":1566984596000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/spineor/Downloads/aelis4-web/vue-client/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nimport { Message } from 'element-ui';\nimport { mapGetters } from 'vuex';\nimport constants from '@/utils/constants';\nexport default {\n  computed: _objectSpread({}, mapGetters(['orderEntry', 'hasOrderConsolidations'])),\n  data: function data() {\n    return {\n      dialogVisible: false,\n      changeShipDateform: {\n        newShipDate: null\n      },\n      formRules: {\n        newShipDate: [{\n          required: true,\n          message: this.$t('warehouse.orderEntry.error.newShipDateRequired'),\n          trigger: 'blur'\n        }]\n      },\n      shipDatePickerOptions: {}\n    };\n  },\n  methods: {\n    handleClose: function handleClose(done) {\n      done();\n    },\n    handleOpen: function handleOpen() {\n      var _this = this;\n\n      this.changeShipDateform.newShipDate = null;\n      var currentShipDate = moment(this.orderEntry.actualFilters.shipDate, 'YYYY-MM-DD');\n      var shipDateFutureDays = this.orderEntry.settings[constants.SETTINGS.shipDateFutureDays];\n      this.shipDatePickerOptions = {\n        disabledDate: function disabledDate(time) {\n          var momentTime = moment(time.getTime());\n          return momentTime.isBefore(moment(), 'day') || momentTime.isAfter(moment().add(shipDateFutureDays || 0, 'days'), 'day') || currentShipDate.isSame(momentTime, 'days');\n        }\n      };\n      this.$nextTick(function () {\n        _this.$refs.changeShipDateform.$el[0].focus();\n      });\n    },\n    confirmCutoffContinue: function () {\n      var _confirmCutoffContinue = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var confirmCutoff, confirmCutoffText;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.$store.dispatch('orderEntry/getCutoffLimitDateNewShipdate', this.changeShipDateform.newShipDate);\n\n              case 2:\n                _context.next = 4;\n                return this.$store.dispatch('orderEntry/getCutoffLimitDate');\n\n              case 4:\n                confirmCutoff = true;\n                confirmCutoffText = ''; // Current ShipDate:\n\n                if (this.orderEntry.cutoff.limitDateMillis === 0) {\n                  confirmCutoffText = this.$t('warehouse.orderEntry.changeShipDateCurrentDateMovedConfirm').replace('[shipDate]', moment(this.orderEntry.actualFilters.shipDate).format(constants.DATES.DEFAULT_DISPLAY_FORMAT));\n                } else if (this.orderEntry.cutoff.limitDateMillisNewShipDate === 0) {\n                  // New ShipDate:\n                  confirmCutoffText = this.$t('warehouse.orderEntry.changeShipDatenewDateMovedConfirm').replace('[shipDate]', moment(this.changeShipDateform.newShipDate).format(constants.DATES.DEFAULT_DISPLAY_FORMAT));\n                } // If one of two previous validations indicate that date cutoff closed\n\n\n                if (!confirmCutoffText) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 10;\n                return this.$confirm(confirmCutoffText, {\n                  confirmButtonText: this.$t('common.yes')\n                }).catch(function () {});\n\n              case 10:\n                confirmCutoff = _context.sent;\n\n              case 11:\n                return _context.abrupt(\"return\", !!confirmCutoff);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function confirmCutoffContinue() {\n        return _confirmCutoffContinue.apply(this, arguments);\n      }\n\n      return confirmCutoffContinue;\n    }(),\n    handleChangeShipDate: function () {\n      var _handleChangeShipDate = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this2.$refs.changeShipDateform.validate(\n                  /*#__PURE__*/\n                  function () {\n                    var _ref = _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee2(valid) {\n                      var confirmCutoffContinue, loading, response;\n                      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              if (!valid) {\n                                _context2.next = 25;\n                                break;\n                              }\n\n                              _context2.next = 3;\n                              return _this2.confirmCutoffContinue();\n\n                            case 3:\n                              confirmCutoffContinue = _context2.sent;\n\n                              if (!confirmCutoffContinue) {\n                                reject(false);\n                              } // Close previous messages and show loading\n\n\n                              Message.closeAll();\n                              loading = _this2.$loading(constants.LOADING.CHANGE_SHIPDATE_CONFIG); // Call action to changeShipDate\n\n                              _context2.prev = 7;\n                              _context2.next = 10;\n                              return _this2.$store.dispatch('orderEntry/changeShipDate', _this2.changeShipDateform.newShipDate);\n\n                            case 10:\n                              response = _context2.sent;\n\n                              _this2.$message({\n                                dangerouslyUseHTMLString: true,\n                                type: 'success',\n                                message: _this2.$t('warehouse.orderEntry.changeShipDateShipmentsMoved').replace('[totalShipmentsMoved]', response.data.total).replace('[shipDate]', moment(_this2.changeShipDateform.newShipDate, constants.DATES.DEFAULT_BACKEND_FORMAT).format(constants.DATES.DEFAULT_DISPLAY_FORMAT))\n                              });\n\n                              _this2.dialogVisible = false;\n\n                              _this2.$store.dispatch('orderEntry/search', {});\n\n                              resolve(response);\n                              _context2.next = 20;\n                              break;\n\n                            case 17:\n                              _context2.prev = 17;\n                              _context2.t0 = _context2[\"catch\"](7);\n                              reject(_context2.t0);\n\n                            case 20:\n                              _context2.prev = 20;\n                              loading.close();\n                              return _context2.finish(20);\n\n                            case 23:\n                              _context2.next = 26;\n                              break;\n\n                            case 25:\n                              reject(new Error(_this2.$t('common.invalid')));\n\n                            case 26:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2, null, [[7, 17, 20, 23]]);\n                    }));\n\n                    return function (_x) {\n                      return _ref.apply(this, arguments);\n                    };\n                  }());\n                }));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function handleChangeShipDate() {\n        return _handleChangeShipDate.apply(this, arguments);\n      }\n\n      return handleChangeShipDate;\n    }(),\n    isVisible: function isVisible() {\n      var hasChangeShipDatePermission = this.$can(this.permissions.DATA_ENTRY.CHANGE_SHIP_DATE);\n      return this.hasOrderConsolidations && hasChangeShipDatePermission;\n    }\n  }\n};",{"version":3,"sources":["ChangeShipDateButton.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<span v-show=\"isVisible()\">\n    <el-link id=\"btn-change-ship-date\" class=\"btn-change-ship-date\" @click=\"dialogVisible = true\" size=\"mini\" :underline=\"false\">{{ $t('warehouse.orderEntry.changeShipDate') }}</el-link>\n    <el-dialog\n      :close-on-click-modal=\"false\"\n      v-on:open=\"handleOpen\"\n      :title=\"$t('warehouse.orderEntry.changeShipDate')\"\n      :visible.sync=\"dialogVisible\"\n      width=\"32%\"\n      id=\"change-ship-date-dialog\"\n      :before-close=\"handleClose\">\n      <el-form :model=\"changeShipDateform\" :rules=\"formRules\" ref=\"changeShipDateform\" label-position=\"right\" size=\"mini\" inline class=\"text-align-end\">\n          <el-row>\n            <el-col class=\"form-vertical-item\">\n            <el-form-item :label=\"$t('warehouse.orderEntry.newShipDate')\" prop=\"newShipDate\">\n                <el-date-picker\n                v-model=\"changeShipDateform.newShipDate\"\n                format=\"MM/dd/yyyy\"\n                :picker-options=\"shipDatePickerOptions\"\n                type=\"date\"\n                id=\"changeShipDateform-new-ship-date\">\n                </el-date-picker>\n            </el-form-item>\n            </el-col>\n          </el-row>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogVisible = false\" size=\"mini\">{{ $t('common.cancel') }}</el-button>\n        <el-button type=\"primary\" @click=\"handleChangeShipDate\" size=\"mini\" class=\"margin-r-18\" id=\"btn-change-ship-date-move\">{{ $t('common.move') }}</el-button>\n      </div>\n    </el-dialog>\n</span>\n</template>\n\n<script>\nimport moment from 'moment';\nimport { Message } from 'element-ui';\nimport { mapGetters } from 'vuex';\nimport constants from '@/utils/constants';\n\nexport default {\n  computed: {\n    ...mapGetters([\n      'orderEntry',\n      'hasOrderConsolidations'\n    ])\n  },\n  data() {\n    return {\n      dialogVisible: false,\n      changeShipDateform: {\n        newShipDate: null\n      },\n      formRules: {\n        newShipDate: [\n          { required: true, message: this.$t('warehouse.orderEntry.error.newShipDateRequired'), trigger: 'blur' }\n        ]\n      },\n      shipDatePickerOptions: {}\n    };\n  },\n  methods: {\n    handleClose(done) {\n      done();\n    },\n    handleOpen() {\n      this.changeShipDateform.newShipDate = null;\n      const currentShipDate = moment(this.orderEntry.actualFilters.shipDate, 'YYYY-MM-DD');\n      const shipDateFutureDays = this.orderEntry.settings[constants.SETTINGS.shipDateFutureDays];\n      this.shipDatePickerOptions = {\n        disabledDate(time) {\n          const momentTime = moment(time.getTime());\n          return momentTime.isBefore(moment(), 'day')\n          || momentTime.isAfter(moment().add(shipDateFutureDays || 0, 'days'), 'day')\n          || currentShipDate.isSame(momentTime, 'days');\n        }\n      };\n      this.$nextTick(() => {\n        this.$refs.changeShipDateform.$el[0].focus();\n      });\n    },\n    async confirmCutoffContinue() {\n      await this.$store.dispatch('orderEntry/getCutoffLimitDateNewShipdate', this.changeShipDateform.newShipDate);\n      await this.$store.dispatch('orderEntry/getCutoffLimitDate');\n      let confirmCutoff = true;\n      let confirmCutoffText = '';\n\n      // Current ShipDate:\n      if (this.orderEntry.cutoff.limitDateMillis === 0) {\n        confirmCutoffText = this.$t('warehouse.orderEntry.changeShipDateCurrentDateMovedConfirm').replace('[shipDate]', moment(this.orderEntry.actualFilters.shipDate).format(constants.DATES.DEFAULT_DISPLAY_FORMAT));\n      } else if (this.orderEntry.cutoff.limitDateMillisNewShipDate === 0) {\n        // New ShipDate:\n        confirmCutoffText = this.$t('warehouse.orderEntry.changeShipDatenewDateMovedConfirm').replace('[shipDate]', moment(this.changeShipDateform.newShipDate).format(constants.DATES.DEFAULT_DISPLAY_FORMAT));\n      }\n      // If one of two previous validations indicate that date cutoff closed\n      if (confirmCutoffText) {\n        confirmCutoff = await this.$confirm(confirmCutoffText, { confirmButtonText: this.$t('common.yes') }).catch(() => {});\n      }\n      return !!confirmCutoff;\n    },\n    async handleChangeShipDate() {\n      return new Promise((resolve, reject) => {\n        this.$refs.changeShipDateform.validate(async (valid) => {\n          if (valid) {\n            // Cutoff validations:\n            const confirmCutoffContinue = await this.confirmCutoffContinue();\n            if (!confirmCutoffContinue) { reject(false); }\n            // Close previous messages and show loading\n            Message.closeAll();\n            const loading = this.$loading(constants.LOADING.CHANGE_SHIPDATE_CONFIG);\n            // Call action to changeShipDate\n            try {\n              const response = await this.$store.dispatch('orderEntry/changeShipDate', this.changeShipDateform.newShipDate);\n              this.$message({\n                dangerouslyUseHTMLString: true,\n                type: 'success',\n                message: this.$t('warehouse.orderEntry.changeShipDateShipmentsMoved')\n                  .replace('[totalShipmentsMoved]', response.data.total)\n                  .replace('[shipDate]', moment(this.changeShipDateform.newShipDate, constants.DATES.DEFAULT_BACKEND_FORMAT).format(constants.DATES.DEFAULT_DISPLAY_FORMAT))\n              });\n              this.dialogVisible = false;\n              this.$store.dispatch('orderEntry/search', {});\n              resolve(response);\n            } catch (error) {\n              reject(error);\n            } finally {\n              loading.close();\n            }\n          } else {\n            reject(new Error(this.$t('common.invalid')));\n          }\n        });\n      });\n    },\n    isVisible() {\n      const hasChangeShipDatePermission = this.$can(this.permissions.DATA_ENTRY.CHANGE_SHIP_DATE);\n      return this.hasOrderConsolidations && hasChangeShipDatePermission;\n    }\n  }\n};\n</script>\n<style rel=\"stylesheet/scss\" lang=\"scss\">\n#btn-change-ship-date {\n  color: #008d00;\n}\n\n.text-align-end {\n  text-align: end;\n}\n</style>\n"],"sourceRoot":"src/views/warehouse/orderEntry/components"}]}